//
// PublicKeyEcdsaSecp256k1.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

@available(*, deprecated, renamed: "GatewayAPI.PublicKeyEcdsaSecp256k1")
typealias PublicKeyEcdsaSecp256k1 = GatewayAPI.PublicKeyEcdsaSecp256k1

extension GatewayAPI {

struct PublicKeyEcdsaSecp256k1: Codable, Hashable {

    private(set) var keyType: PublicKeyType
    /** The hex-encoded compressed ECDSA Secp256k1 key (33 bytes) */
    private(set) var keyHex: String

    init(keyType: PublicKeyType, keyHex: String) {
        self.keyType = keyType
        self.keyHex = keyHex
    }

    enum CodingKeys: String, CodingKey, CaseIterable {
        case keyType = "key_type"
        case keyHex = "key_hex"
    }

    // Encodable protocol methods

    func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(keyType, forKey: .keyType)
        try container.encode(keyHex, forKey: .keyHex)
    }
}

}

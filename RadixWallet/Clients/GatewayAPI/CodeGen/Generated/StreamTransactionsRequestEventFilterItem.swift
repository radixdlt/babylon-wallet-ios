//
// StreamTransactionsRequestEventFilterItem.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

@available(*, deprecated, renamed: "GatewayAPI.StreamTransactionsRequestEventFilterItem")
typealias StreamTransactionsRequestEventFilterItem = GatewayAPI.StreamTransactionsRequestEventFilterItem

extension GatewayAPI {

struct StreamTransactionsRequestEventFilterItem: Codable, Hashable {

    enum Event: String, Codable, CaseIterable {
        case deposit = "Deposit"
        case withdrawal = "Withdrawal"
    }
    private(set) var event: Event
    /** Bech32m-encoded human readable version of the address. */
    private(set) var emitterAddress: String?
    /** Bech32m-encoded human readable version of the address. */
    private(set) var resourceAddress: String?

    init(event: Event, emitterAddress: String? = nil, resourceAddress: String? = nil) {
        self.event = event
        self.emitterAddress = emitterAddress
        self.resourceAddress = resourceAddress
    }

    enum CodingKeys: String, CodingKey, CaseIterable {
        case event
        case emitterAddress = "emitter_address"
        case resourceAddress = "resource_address"
    }

    // Encodable protocol methods

    func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(event, forKey: .event)
        try container.encodeIfPresent(emitterAddress, forKey: .emitterAddress)
        try container.encodeIfPresent(resourceAddress, forKey: .resourceAddress)
    }
}

}

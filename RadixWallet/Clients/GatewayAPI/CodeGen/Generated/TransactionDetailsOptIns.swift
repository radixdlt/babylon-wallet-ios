//
// TransactionDetailsOptIns.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

@available(*, deprecated, renamed: "GatewayAPI.TransactionDetailsOptIns")
public typealias TransactionDetailsOptIns = GatewayAPI.TransactionDetailsOptIns

extension GatewayAPI {

public struct TransactionDetailsOptIns: Codable, Hashable {

    public private(set) var rawHex: Bool?
    public private(set) var receiptStateChanges: Bool?
    public private(set) var receiptFeeSummary: Bool?
    public private(set) var receiptFeeSource: Bool?
    public private(set) var receiptFeeDestination: Bool?
    public private(set) var receiptCostingParameters: Bool?
    public private(set) var receiptEvents: Bool?
    public private(set) var affectedGlobalEntities: Bool?

    public init(rawHex: Bool? = nil, receiptStateChanges: Bool? = nil, receiptFeeSummary: Bool? = nil, receiptFeeSource: Bool? = nil, receiptFeeDestination: Bool? = nil, receiptCostingParameters: Bool? = nil, receiptEvents: Bool? = nil, affectedGlobalEntities: Bool? = nil) {
        self.rawHex = rawHex
        self.receiptStateChanges = receiptStateChanges
        self.receiptFeeSummary = receiptFeeSummary
        self.receiptFeeSource = receiptFeeSource
        self.receiptFeeDestination = receiptFeeDestination
        self.receiptCostingParameters = receiptCostingParameters
        self.receiptEvents = receiptEvents
        self.affectedGlobalEntities = affectedGlobalEntities
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case rawHex = "raw_hex"
        case receiptStateChanges = "receipt_state_changes"
        case receiptFeeSummary = "receipt_fee_summary"
        case receiptFeeSource = "receipt_fee_source"
        case receiptFeeDestination = "receipt_fee_destination"
        case receiptCostingParameters = "receipt_costing_parameters"
        case receiptEvents = "receipt_events"
        case affectedGlobalEntities = "affected_global_entities"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(rawHex, forKey: .rawHex)
        try container.encodeIfPresent(receiptStateChanges, forKey: .receiptStateChanges)
        try container.encodeIfPresent(receiptFeeSummary, forKey: .receiptFeeSummary)
        try container.encodeIfPresent(receiptFeeSource, forKey: .receiptFeeSource)
        try container.encodeIfPresent(receiptFeeDestination, forKey: .receiptFeeDestination)
        try container.encodeIfPresent(receiptCostingParameters, forKey: .receiptCostingParameters)
        try container.encodeIfPresent(receiptEvents, forKey: .receiptEvents)
        try container.encodeIfPresent(affectedGlobalEntities, forKey: .affectedGlobalEntities)
    }
}

}

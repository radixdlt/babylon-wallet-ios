//
// ValidatorCollectionItem.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

@available(*, deprecated, renamed: "GatewayAPI.ValidatorCollectionItem")
typealias ValidatorCollectionItem = GatewayAPI.ValidatorCollectionItem

extension GatewayAPI {

struct ValidatorCollectionItem: Codable, Hashable {

    /** Bech32m-encoded human readable version of the address. */
    private(set) var address: String
    private(set) var stakeVault: ValidatorVaultItem
    private(set) var pendingXrdWithdrawVault: ValidatorVaultItem
    private(set) var lockedOwnerStakeUnitVault: ValidatorVaultItem
    private(set) var pendingOwnerStakeUnitUnlockVault: ValidatorVaultItem
    /** Validator inner state representation. This type is defined in the Core API as `ValidatorFieldStateValue`. See the Core API documentation for more details.  */
    private(set) var state: AnyCodable?
    private(set) var activeInEpoch: ValidatorCollectionItemActiveInEpoch?
    private(set) var metadata: EntityMetadataCollection
    private(set) var effectiveFeeFactor: ValidatorCollectionItemEffectiveFeeFactor

    init(address: String, stakeVault: ValidatorVaultItem, pendingXrdWithdrawVault: ValidatorVaultItem, lockedOwnerStakeUnitVault: ValidatorVaultItem, pendingOwnerStakeUnitUnlockVault: ValidatorVaultItem, state: AnyCodable?, activeInEpoch: ValidatorCollectionItemActiveInEpoch? = nil, metadata: EntityMetadataCollection, effectiveFeeFactor: ValidatorCollectionItemEffectiveFeeFactor) {
        self.address = address
        self.stakeVault = stakeVault
        self.pendingXrdWithdrawVault = pendingXrdWithdrawVault
        self.lockedOwnerStakeUnitVault = lockedOwnerStakeUnitVault
        self.pendingOwnerStakeUnitUnlockVault = pendingOwnerStakeUnitUnlockVault
        self.state = state
        self.activeInEpoch = activeInEpoch
        self.metadata = metadata
        self.effectiveFeeFactor = effectiveFeeFactor
    }

    enum CodingKeys: String, CodingKey, CaseIterable {
        case address
        case stakeVault = "stake_vault"
        case pendingXrdWithdrawVault = "pending_xrd_withdraw_vault"
        case lockedOwnerStakeUnitVault = "locked_owner_stake_unit_vault"
        case pendingOwnerStakeUnitUnlockVault = "pending_owner_stake_unit_unlock_vault"
        case state
        case activeInEpoch = "active_in_epoch"
        case metadata
        case effectiveFeeFactor = "effective_fee_factor"
    }

    // Encodable protocol methods

    func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(address, forKey: .address)
        try container.encode(stakeVault, forKey: .stakeVault)
        try container.encode(pendingXrdWithdrawVault, forKey: .pendingXrdWithdrawVault)
        try container.encode(lockedOwnerStakeUnitVault, forKey: .lockedOwnerStakeUnitVault)
        try container.encode(pendingOwnerStakeUnitUnlockVault, forKey: .pendingOwnerStakeUnitUnlockVault)
        try container.encode(state, forKey: .state)
        try container.encodeIfPresent(activeInEpoch, forKey: .activeInEpoch)
        try container.encode(metadata, forKey: .metadata)
        try container.encode(effectiveFeeFactor, forKey: .effectiveFeeFactor)
    }
}

}

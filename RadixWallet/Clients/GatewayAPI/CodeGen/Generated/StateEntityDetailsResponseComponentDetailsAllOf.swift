//
// StateEntityDetailsResponseComponentDetailsAllOf.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

@available(*, deprecated, renamed: "GatewayAPI.StateEntityDetailsResponseComponentDetailsAllOf")
public typealias StateEntityDetailsResponseComponentDetailsAllOf = GatewayAPI.StateEntityDetailsResponseComponentDetailsAllOf

extension GatewayAPI {

public struct StateEntityDetailsResponseComponentDetailsAllOf: Codable, Hashable {

    /** Bech32m-encoded human readable version of the address. */
    public private(set) var packageAddress: String?
    public private(set) var blueprintName: String
    public private(set) var blueprintVersion: String
    /** A representation of a component's inner state. If this entity is a `GenericComponent`, this field will be in a programmatic JSON structure (you can deserialize it as a `ProgrammaticScryptoSborValue`). Otherwise, for \"native\" components such as `Account`, `Validator`, `AccessController`, `OneResourcePool`, `TwoResourcePool`, and `MultiResourcePool`, this field will be a custom JSON model defined in the Core API schema.  */
    public private(set) var state: AnyCodable?
    public private(set) var roleAssignments: ComponentEntityRoleAssignments?
    /** String-encoded decimal representing the amount of a related fungible resource. */
    public private(set) var royaltyVaultBalance: String?

    public init(packageAddress: String? = nil, blueprintName: String, blueprintVersion: String, state: AnyCodable? = nil, roleAssignments: ComponentEntityRoleAssignments? = nil, royaltyVaultBalance: String? = nil) {
        self.packageAddress = packageAddress
        self.blueprintName = blueprintName
        self.blueprintVersion = blueprintVersion
        self.state = state
        self.roleAssignments = roleAssignments
        self.royaltyVaultBalance = royaltyVaultBalance
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case packageAddress = "package_address"
        case blueprintName = "blueprint_name"
        case blueprintVersion = "blueprint_version"
        case state
        case roleAssignments = "role_assignments"
        case royaltyVaultBalance = "royalty_vault_balance"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(packageAddress, forKey: .packageAddress)
        try container.encode(blueprintName, forKey: .blueprintName)
        try container.encode(blueprintVersion, forKey: .blueprintVersion)
        try container.encodeIfPresent(state, forKey: .state)
        try container.encodeIfPresent(roleAssignments, forKey: .roleAssignments)
        try container.encodeIfPresent(royaltyVaultBalance, forKey: .royaltyVaultBalance)
    }
}

}

//
// StateEntityDetailsResponseNonFungibleResourceDetails.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

@available(*, deprecated, renamed: "GatewayAPI.StateEntityDetailsResponseNonFungibleResourceDetails")
public typealias StateEntityDetailsResponseNonFungibleResourceDetails = GatewayAPI.StateEntityDetailsResponseNonFungibleResourceDetails

extension GatewayAPI {

public struct StateEntityDetailsResponseNonFungibleResourceDetails: Codable, Hashable {

    public private(set) var type: StateEntityDetailsResponseItemDetailsType
    public private(set) var roleAssignments: ComponentEntityRoleAssignments
    public private(set) var nonFungibleIdType: NonFungibleIdType
    /** String-encoded decimal representing the amount of a related fungible resource. */
    public private(set) var totalSupply: String
    /** String-encoded decimal representing the amount of a related fungible resource. */
    public private(set) var totalMinted: String
    /** String-encoded decimal representing the amount of a related fungible resource. */
    public private(set) var totalBurned: String
    public private(set) var nonFungibleDataMutableFields: [String]
    public private(set) var twoWayLinkedDapps: TwoWayLinkedDappsCollection?
    public private(set) var nativeResourceDetails: NativeResourceDetails?

    public init(type: StateEntityDetailsResponseItemDetailsType, roleAssignments: ComponentEntityRoleAssignments, nonFungibleIdType: NonFungibleIdType, totalSupply: String, totalMinted: String, totalBurned: String, nonFungibleDataMutableFields: [String], twoWayLinkedDapps: TwoWayLinkedDappsCollection? = nil, nativeResourceDetails: NativeResourceDetails? = nil) {
        self.type = type
        self.roleAssignments = roleAssignments
        self.nonFungibleIdType = nonFungibleIdType
        self.totalSupply = totalSupply
        self.totalMinted = totalMinted
        self.totalBurned = totalBurned
        self.nonFungibleDataMutableFields = nonFungibleDataMutableFields
        self.twoWayLinkedDapps = twoWayLinkedDapps
        self.nativeResourceDetails = nativeResourceDetails
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case type
        case roleAssignments = "role_assignments"
        case nonFungibleIdType = "non_fungible_id_type"
        case totalSupply = "total_supply"
        case totalMinted = "total_minted"
        case totalBurned = "total_burned"
        case nonFungibleDataMutableFields = "non_fungible_data_mutable_fields"
        case twoWayLinkedDapps = "two_way_linked_dapps"
        case nativeResourceDetails = "native_resource_details"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(type, forKey: .type)
        try container.encode(roleAssignments, forKey: .roleAssignments)
        try container.encode(nonFungibleIdType, forKey: .nonFungibleIdType)
        try container.encode(totalSupply, forKey: .totalSupply)
        try container.encode(totalMinted, forKey: .totalMinted)
        try container.encode(totalBurned, forKey: .totalBurned)
        try container.encode(nonFungibleDataMutableFields, forKey: .nonFungibleDataMutableFields)
        try container.encodeIfPresent(twoWayLinkedDapps, forKey: .twoWayLinkedDapps)
        try container.encodeIfPresent(nativeResourceDetails, forKey: .nativeResourceDetails)
    }
}

}

//
// NonFungibleResourcesCollectionItemVaultAggregated.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

@available(*, deprecated, renamed: "GatewayAPI.NonFungibleResourcesCollectionItemVaultAggregated")
typealias NonFungibleResourcesCollectionItemVaultAggregated = GatewayAPI.NonFungibleResourcesCollectionItemVaultAggregated

extension GatewayAPI {

struct NonFungibleResourcesCollectionItemVaultAggregated: Codable, Hashable {

    private(set) var aggregationLevel: ResourceAggregationLevel
    /** Bech32m-encoded human readable version of the address. */
    private(set) var resourceAddress: String
    private(set) var explicitMetadata: EntityMetadataCollection?
    private(set) var vaults: NonFungibleResourcesCollectionItemVaultAggregatedVault

    init(aggregationLevel: ResourceAggregationLevel, resourceAddress: String, explicitMetadata: EntityMetadataCollection? = nil, vaults: NonFungibleResourcesCollectionItemVaultAggregatedVault) {
        self.aggregationLevel = aggregationLevel
        self.resourceAddress = resourceAddress
        self.explicitMetadata = explicitMetadata
        self.vaults = vaults
    }

    enum CodingKeys: String, CodingKey, CaseIterable {
        case aggregationLevel = "aggregation_level"
        case resourceAddress = "resource_address"
        case explicitMetadata = "explicit_metadata"
        case vaults
    }

    // Encodable protocol methods

    func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(aggregationLevel, forKey: .aggregationLevel)
        try container.encode(resourceAddress, forKey: .resourceAddress)
        try container.encodeIfPresent(explicitMetadata, forKey: .explicitMetadata)
        try container.encode(vaults, forKey: .vaults)
    }
}

}

//
// ResourceHoldersCollectionFungibleResourceItem.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

@available(*, deprecated, renamed: "GatewayAPI.ResourceHoldersCollectionFungibleResourceItem")
public typealias ResourceHoldersCollectionFungibleResourceItem = GatewayAPI.ResourceHoldersCollectionFungibleResourceItem

extension GatewayAPI {

public struct ResourceHoldersCollectionFungibleResourceItem: Codable, Hashable {

    public private(set) var type: ResourceHoldersResourceType
    /** Bech32m-encoded human readable version of the address. */
    public private(set) var holderAddress: String
    public private(set) var lastUpdatedAtStateVersion: Int64
    /** String-encoded decimal representing the amount of a related fungible resource. */
    public private(set) var amount: String

    public init(type: ResourceHoldersResourceType, holderAddress: String, lastUpdatedAtStateVersion: Int64, amount: String) {
        self.type = type
        self.holderAddress = holderAddress
        self.lastUpdatedAtStateVersion = lastUpdatedAtStateVersion
        self.amount = amount
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case type
        case holderAddress = "holder_address"
        case lastUpdatedAtStateVersion = "last_updated_at_state_version"
        case amount
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(type, forKey: .type)
        try container.encode(holderAddress, forKey: .holderAddress)
        try container.encode(lastUpdatedAtStateVersion, forKey: .lastUpdatedAtStateVersion)
        try container.encode(amount, forKey: .amount)
    }
}

}

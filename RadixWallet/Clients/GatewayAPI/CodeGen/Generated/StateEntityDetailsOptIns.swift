//
// StateEntityDetailsOptIns.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

@available(*, deprecated, renamed: "GatewayAPI.StateEntityDetailsOptIns")
typealias StateEntityDetailsOptIns = GatewayAPI.StateEntityDetailsOptIns

extension GatewayAPI {

/** Check detailed [OptIns](#section/Using-endpoints-with-opt-in-features) documentation for more details */
struct StateEntityDetailsOptIns: Codable, Hashable {

    /** if set to `true`, ancestor addresses - `parent_address`, `owner_address` and `global_address` for entities are returned. */
    private(set) var ancestorIdentities: Bool? = false
    /** if set to `true`, `royalty_config` for component entities is returned. */
    private(set) var componentRoyaltyConfig: Bool? = false
    /** if set to `true`, `royalty_vault_balance` for component entities is returned. */
    private(set) var componentRoyaltyVaultBalance: Bool? = false
    /** if set to `true`, `royalty_vault_balance` for package entities is returned. */
    private(set) var packageRoyaltyVaultBalance: Bool? = false
    /** if set to `true`, first page of non fungible ids are returned for each non fungible resource, with `next_cursor` which can be later used at `/state/entity/page/non-fungible-vault/ids` endpoint. */
    private(set) var nonFungibleIncludeNfids: Bool? = false
    /** allows specifying explicitly metadata properties which should be returned in response. */
    private(set) var explicitMetadata: [String]?
    /** if set to `true`, on-ledger dApp two-way links (resolved & verified) are returned. See https://docs.radixdlt.com/docs/metadata-for-verification for more details. */
    private(set) var dappTwoWayLinks: Bool? = false
    /** if set to `true`, additional details for the Network native resources are returned. */
    private(set) var nativeResourceDetails: Bool? = false

    init(ancestorIdentities: Bool? = false, componentRoyaltyConfig: Bool? = false, componentRoyaltyVaultBalance: Bool? = false, packageRoyaltyVaultBalance: Bool? = false, nonFungibleIncludeNfids: Bool? = false, explicitMetadata: [String]? = nil, dappTwoWayLinks: Bool? = false, nativeResourceDetails: Bool? = false) {
        self.ancestorIdentities = ancestorIdentities
        self.componentRoyaltyConfig = componentRoyaltyConfig
        self.componentRoyaltyVaultBalance = componentRoyaltyVaultBalance
        self.packageRoyaltyVaultBalance = packageRoyaltyVaultBalance
        self.nonFungibleIncludeNfids = nonFungibleIncludeNfids
        self.explicitMetadata = explicitMetadata
        self.dappTwoWayLinks = dappTwoWayLinks
        self.nativeResourceDetails = nativeResourceDetails
    }

    enum CodingKeys: String, CodingKey, CaseIterable {
        case ancestorIdentities = "ancestor_identities"
        case componentRoyaltyConfig = "component_royalty_config"
        case componentRoyaltyVaultBalance = "component_royalty_vault_balance"
        case packageRoyaltyVaultBalance = "package_royalty_vault_balance"
        case nonFungibleIncludeNfids = "non_fungible_include_nfids"
        case explicitMetadata = "explicit_metadata"
        case dappTwoWayLinks = "dapp_two_way_links"
        case nativeResourceDetails = "native_resource_details"
    }

    // Encodable protocol methods

    func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(ancestorIdentities, forKey: .ancestorIdentities)
        try container.encodeIfPresent(componentRoyaltyConfig, forKey: .componentRoyaltyConfig)
        try container.encodeIfPresent(componentRoyaltyVaultBalance, forKey: .componentRoyaltyVaultBalance)
        try container.encodeIfPresent(packageRoyaltyVaultBalance, forKey: .packageRoyaltyVaultBalance)
        try container.encodeIfPresent(nonFungibleIncludeNfids, forKey: .nonFungibleIncludeNfids)
        try container.encodeIfPresent(explicitMetadata, forKey: .explicitMetadata)
        try container.encodeIfPresent(dappTwoWayLinks, forKey: .dappTwoWayLinks)
        try container.encodeIfPresent(nativeResourceDetails, forKey: .nativeResourceDetails)
    }
}

}

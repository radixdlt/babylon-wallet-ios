//
// StateEntityDetailsResponsePackageDetails.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

@available(*, deprecated, renamed: "GatewayAPI.StateEntityDetailsResponsePackageDetails")
typealias StateEntityDetailsResponsePackageDetails = GatewayAPI.StateEntityDetailsResponsePackageDetails

extension GatewayAPI {

/** vm_type, code_hash_hex and code_hex are always going to be empty, use &#x60;codes&#x60; property which will return collection (it&#39;s possible after protocol update that package might have multiple codes) */
struct StateEntityDetailsResponsePackageDetails: Codable, Hashable {

    private(set) var type: StateEntityDetailsResponseItemDetailsType
    private(set) var codes: PackageCodeCollection
    private(set) var vmType: PackageVmType
    /** Hex-encoded binary blob. */
    private(set) var codeHashHex: String
    /** Hex-encoded binary blob. */
    private(set) var codeHex: String
    /** String-encoded decimal representing the amount of a related fungible resource. */
    private(set) var royaltyVaultBalance: String?
    private(set) var blueprints: PackageBlueprintCollection?
    private(set) var schemas: EntitySchemaCollection?
    private(set) var roleAssignments: ComponentEntityRoleAssignments?
    /** Bech32m-encoded human readable version of the address. */
    private(set) var twoWayLinkedDappAddress: String?

    init(type: StateEntityDetailsResponseItemDetailsType, codes: PackageCodeCollection, vmType: PackageVmType, codeHashHex: String, codeHex: String, royaltyVaultBalance: String? = nil, blueprints: PackageBlueprintCollection? = nil, schemas: EntitySchemaCollection? = nil, roleAssignments: ComponentEntityRoleAssignments? = nil, twoWayLinkedDappAddress: String? = nil) {
        self.type = type
        self.codes = codes
        self.vmType = vmType
        self.codeHashHex = codeHashHex
        self.codeHex = codeHex
        self.royaltyVaultBalance = royaltyVaultBalance
        self.blueprints = blueprints
        self.schemas = schemas
        self.roleAssignments = roleAssignments
        self.twoWayLinkedDappAddress = twoWayLinkedDappAddress
    }

    enum CodingKeys: String, CodingKey, CaseIterable {
        case type
        case codes
        case vmType = "vm_type"
        case codeHashHex = "code_hash_hex"
        case codeHex = "code_hex"
        case royaltyVaultBalance = "royalty_vault_balance"
        case blueprints
        case schemas
        case roleAssignments = "role_assignments"
        case twoWayLinkedDappAddress = "two_way_linked_dapp_address"
    }

    // Encodable protocol methods

    func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(type, forKey: .type)
        try container.encode(codes, forKey: .codes)
        try container.encode(vmType, forKey: .vmType)
        try container.encode(codeHashHex, forKey: .codeHashHex)
        try container.encode(codeHex, forKey: .codeHex)
        try container.encodeIfPresent(royaltyVaultBalance, forKey: .royaltyVaultBalance)
        try container.encodeIfPresent(blueprints, forKey: .blueprints)
        try container.encodeIfPresent(schemas, forKey: .schemas)
        try container.encodeIfPresent(roleAssignments, forKey: .roleAssignments)
        try container.encodeIfPresent(twoWayLinkedDappAddress, forKey: .twoWayLinkedDappAddress)
    }
}

}

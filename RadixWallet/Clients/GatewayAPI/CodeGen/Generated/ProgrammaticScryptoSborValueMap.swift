//
// ProgrammaticScryptoSborValueMap.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

@available(*, deprecated, renamed: "GatewayAPI.ProgrammaticScryptoSborValueMap")
public typealias ProgrammaticScryptoSborValueMap = GatewayAPI.ProgrammaticScryptoSborValueMap

extension GatewayAPI {

public struct ProgrammaticScryptoSborValueMap: Codable, Hashable {

    public private(set) var kind: ProgrammaticScryptoSborValueKind
    /** Object type name; available only when a schema is present and the type has a name. */
    public private(set) var typeName: String?
    /** Field name; available only when the value is a child of a `Tuple` or `Enum`, which has a type with named fields. */
    public private(set) var fieldName: String?
    public private(set) var keyKind: ProgrammaticScryptoSborValueKind
    public private(set) var keyTypeName: String?
    public private(set) var valueKind: ProgrammaticScryptoSborValueKind
    public private(set) var valueTypeName: String?
    public private(set) var entries: [ProgrammaticScryptoSborValueMapEntry]

    public init(kind: ProgrammaticScryptoSborValueKind, typeName: String? = nil, fieldName: String? = nil, keyKind: ProgrammaticScryptoSborValueKind, keyTypeName: String? = nil, valueKind: ProgrammaticScryptoSborValueKind, valueTypeName: String? = nil, entries: [ProgrammaticScryptoSborValueMapEntry]) {
        self.kind = kind
        self.typeName = typeName
        self.fieldName = fieldName
        self.keyKind = keyKind
        self.keyTypeName = keyTypeName
        self.valueKind = valueKind
        self.valueTypeName = valueTypeName
        self.entries = entries
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case kind
        case typeName = "type_name"
        case fieldName = "field_name"
        case keyKind = "key_kind"
        case keyTypeName = "key_type_name"
        case valueKind = "value_kind"
        case valueTypeName = "value_type_name"
        case entries
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(kind, forKey: .kind)
        try container.encodeIfPresent(typeName, forKey: .typeName)
        try container.encodeIfPresent(fieldName, forKey: .fieldName)
        try container.encode(keyKind, forKey: .keyKind)
        try container.encodeIfPresent(keyTypeName, forKey: .keyTypeName)
        try container.encode(valueKind, forKey: .valueKind)
        try container.encodeIfPresent(valueTypeName, forKey: .valueTypeName)
        try container.encode(entries, forKey: .entries)
    }
}

}

fastlane_require 'dotenv'
default_platform(:ios)

before_all do
    ensure_xcode_version
    Dotenv.load ".env.secret"
    ensure_git_status_clean
end


platform :ios do
    before_all do
        Dotenv.load ".env.ios"
        dir_to_del = ENV["SCAN_OUTPUT_DIRECTORY"]
        puts "deleting '#{dir_to_del}'"
        sh("rm -rf ../#{dir_to_del}") # must use "../"
    end

    desc "Builds and archives the app"
    lane :build do
        Dotenv.load ".env.ios.release"
        install_distribution_certificates
        build_app
    end

    desc "Runs test"
    lane :tests do
        Dotenv.load ".env.ios.dev"
        run_tests
    end

    desc "Deploy the app for a given flavour: alpha, beta, release"
    desc "Usage `bundle exec fastlane ios deploy --env ios.<specific env>`"
    lane :deploy do |options|
        install_distribution_certificates

        api_key = app_store_connect_api_key
        app_version = read_common_config(key: "APP_VERSION")
        build_number = latest_testflight_build_number(
            version: app_version,
            app_identifier: read_env_config(key: "PRODUCT_BUNDLE_IDENTIFIER"),
            initial_build_number: 0
        ) + 1

        increment_build_number(
            xcodeproj: ENV['PROJ_PATH'],
            build_number: build_number
        )

        export_ios_app

        upload_to_testflight(
            api_key: api_key
        )

        flavour = ENV['FLAVOUR']
        tag = "%s#%s-%s" % [app_version, build_number, flavour]
        add_git_tag(tag: tag)
        push_to_git_remote

        # We dont wanna do GH releases for Alpha or PreAlpha
        if flavour.include?("Beta") || flavour.include?("Release")
            create_gh_release(flavour: flavour)
        end

    end

    desc "Archive and export the iOS app"
    lane :export_ios_app do |options|
        build_ios_app(
            include_symbols: true
        )
    end

    desc "Installs distribution certificates"
    desc "Usage `bundle exec fastlane ios install_distribution_certificate --env ios.<specific env>`"
    lane :install_distribution_certificates do
        code_signing(type: "appstore")
    end

    desc "Installs development certificates"
    lane :install_development_certificates do
        Dotenv.load ".env.ios.dev"
        code_signing(type: "development")
    end

    desc "Generate new dev certificates"
    lane :generate_new_dev_certificates do
        Dotenv.load ".env.ios.dev"
        code_signing(type: "development", readonly: false)
    end

    desc "Generate new appstore certificates"
    desc "Usage bundle exec fastlane ios generate_new_appstore_certificates --env ios.<specific env>"
    lane :generate_new_appstore_certificates do
        code_signing(type: "appstore", readonly: false)
    end

    desc "Registers a new iPhone/Mac device and updates the certificates"
    lane :register_new_device do
        register_new_device_iphone_or_mac
        generate_new_dev_certificates
    end

    error do |lane, exception, options|
        case lane
        when :export_ios_app then
            branch_name = Actions.git_branch
            puts "🌴 branch_name: #{branch_name}"
            if branch_name != "main"
                return
            end
            commithash = sh("git rev-parse HEAD").strip # Fastlane Action.last_git_commit did not work
            gh_workflow_check_url = "https://github.com/radixdlt/babylon-wallet-ios/commit/#{commithash}/checks"

            pretext =
            <<~EOS
            🚨
            Failed to Archive app on branch `#{Actions.git_branch}`
            See: #{gh_workflow_check_url}
            🚨
            EOS

            message =
            <<~EOS
            Perhaps you worked with `#if DEBUG`?
            Try `bundle exec fastlane build` locally."
            EOS

            slack(
                message: message,
                channel: "#chapter--engineering-ios",
                slack_url: ENV["SLACK_WEBHOOK_URL"],
                success: false, # We just failed...
                pretext: pretext,
                default_payloads: [],
                link_names: true
            )
        end
    end
end

def rev_changelog(flavour, most_recent_tags)
    git_commits_range_for_changelog = most_recent_tags.map { |tag| sh("git rev-list --abbrev-commit -n 1 #{tag}").strip }
    changelog_from_git_commits(
      between: git_commits_range_for_changelog,
      pretty: "- %s"
    )
end

def exist_at_path?(filePath)
    return false if filePath.nil?
    if File.exists?(filePath)
        puts "🗃️ Found file at '#{filePath} size: '#{File.size(filePath)}'"
        return true
    elsif Dir.exist?(filePath)
        puts "🗃️ Found Directory at '#{filePath}'"
        return true
    end
    puts "🤷‍♂️ Found no file or dir at '#{filePath}'\n"

    false
end

private_lane :locate_dsym do |options|
    puts "👀 SharedValues::DSYM_OUTPUT_PATH]: '#{lane_context[SharedValues::DSYM_OUTPUT_PATH]}'"
    puts "👀 SharedValues::DSYM_ZIP_PATH]: '#{lane_context[SharedValues::DSYM_ZIP_PATH]}'"

    dsymPathUsed = nil

    if exist_at_path?(lane_context[SharedValues::DSYM_OUTPUT_PATH])
        puts "✅ Found DSYMs at '#{lane_context[SharedValues::DSYM_OUTPUT_PATH]}' ✅"
        dsymPathUsed = lane_context[SharedValues::DSYM_OUTPUT_PATH]
    else
        if exist_at_path?(lane_context[SharedValues::DSYM_ZIP_PATH])
            puts "\nDSYM_OUTPUT_PATH was nil but found file at DSYM_ZIP_PATH, using it...✅\n"
            dsymPathUsed = DSYM_ZIP_PATH
        else
            puts "\n⚠️ Radix: Warning neither DSYM_OUTPUT_PATH nor DSYM_ZIP_PATH exists, calling `dzym_zip` ⚠️\n"
            dsym_zip(all: true)
            if exist_at_path?(lane_context[SharedValues::DSYM_OUTPUT_PATH])
                puts "\n✅ Successfully fixed DSYM by using dsym_zip, using 'DSYM_OUTPUT_PATH' ✅\n"
                dsymPathUsed = lane_context[SharedValues::DSYM_OUTPUT_PATH]
            elsif exist_at_path?(lane_context[SharedValues::DSYM_ZIP_PATH])
                puts "\n✅ Successfully fixed DSYM by using dsym_zip, using 'DSYM_ZIP_PATH' ✅\n"
                dsymPathUsed = lane_context[SharedValues::DSYM_ZIP_PATH]
            else
                puts "\ndsym_zip attempt failed ❌, trying last resort manual read from archive path\n"
                archive = lane_context[SharedValues::XCODEBUILD_ARCHIVE]
                puts "\n🗂️: '#{archive}'\n"
                if exist_at_path?(archive)
                    dsymPathInArchive = "#{archive}/dSYMs/Radix Wallet.app.dSYM"
                    if Dir.exist?(dsymPathInArchive) || exist_at_path?(dsymPathInArchive)
                        puts "\n✅ Last resort saved us, found dsym in archive ✅\n"
                        dsymPathUsed = dsymPathInArchive
                    else
                        puts "\n⚠️ unable to find dsym in archive, thus last resort failed.\n"
                    end
                else
                    puts "\n⚠️ failed to archive..., thus last resort failed.\n"
                end
                puts "\n☣️ failed to fix DSYM, we have none :/ ☣️\n"
            end
        end
    end

    dsymPathUsed
end

private_lane :create_gh_release do |options|
    flavour = options.fetch(:flavour).delete_prefix('"').delete_suffix('"') # if accidentally included

    dsymPathUsed = locate_dsym()

    sh('git fetch --tags')
    most_recent_tags = sh("git tag | grep #{flavour} | sort -r | head -2").split("\n")

    pr_log = rev_changelog(flavour, most_recent_tags)
    versions_string = dependencies_with_hyperlinks()

    release_description = "**Changelog**:\nREPLACE_ME_SYNC_WITH_APP_CONNECT_AND_STAKE_HOLDERS" + "\n\n**Rull Requests**: \n" + pr_log + "\n\n**Dependencies**: \n" + versions_string
    last_tag = most_recent_tags[0]

    set_github_release(
        repository_name: ENV['REPO_NAME'],
        api_token: ENV['GIT_TOKEN'] ,
        name: last_tag,
        tag_name: last_tag,
        description: release_description,
        is_draft: true, # We mark all flavours as DRAFT and then promote them once approved by Apple.
        is_prerelease: flavour.include?("Beta"),
        upload_assets: [dsymPathUsed, lane_context[SharedValues::IPA_OUTPUT_PATH]].compact
    )
end

private_lane :dependencies_with_hyperlinks do |options|
    json_path = ENV['SWIFT_PACKAGE_RESOLVED_PATH']
    dependencies = read_json(
        json_path: json_path
    )[:pins]

    core_deps = [
        { :at => "swift-composable-architecture" },
        { :at => "swift-engine-toolkit" },
        { :at => "webrtc" },
        { :at => "k1" },
        { :at => "swift-atomics" },
        { :at => "asyncextensions" },
        { :at => "swift-algorithms" },
        { :at => "swift-async-algorithms" },
        { :at => "swift-dependencies-additions" },
        { :at => "swiftui-navigation" },
        { :at => "keychainaccess", :v_prefixed_tag => true },
    ]

    versions = Hash.new
    dependencies.each do |child_dict|
        child = child_dict[:identity]
        maybe_relevant_child = core_deps.detect { |h|
            identity = h[:at]
            identity.include? child
        }
        is_child_relevant = maybe_relevant_child.nil? == false
        if is_child_relevant
            child_state_dict = child_dict[:state]
            child_git_repo = child_dict[:location]
            if child_git_repo.end_with?(".git")
                child_git_repo = child_git_repo[0...-4] # remove ".git"
            end

            rev = child_state_dict[:revision]
            abbreviated_rev = rev[0, 7] # 7 first

            maybe_version = child_state_dict[:version]
            maybe_branch = child_state_dict[:branch]
            is_version_nil = maybe_version.nil?
            is_branch_nil = maybe_branch.nil?


            maybe_version_or_branch_string = !is_version_nil ? maybe_version : maybe_branch
            is_version_or_branch_nil = maybe_version_or_branch_string.nil?
            child_visible_string =  !is_version_or_branch_nil ? "#{maybe_version_or_branch_string} (#{abbreviated_rev})" : "commit (specified): #{rev}"
            child_link_commit = "#{child_git_repo}/commit/#{rev}"
            child_link_branch = "#{child_git_repo}/tree/#{maybe_branch}"

            should_prefix_tag_with__v = maybe_relevant_child[:v_prefixed_tag]
            tag = should_prefix_tag_with__v ? "v#{maybe_version}" : maybe_version
            child_link_version = "#{child_git_repo}/releases/tag/#{tag}"
            child_link = !is_version_nil ? child_link_version : (!is_branch_nil ? child_link_branch : child_link_commit)
            child_hyperlink = "[#{child_visible_string}](#{child_link})"
            versions[child] = child_hyperlink
        end
    end
    versions.map { |k, v| "- #{k}: #{v}" }.join("\n")
end

private_lane :register_new_device_iphone_or_mac do |options|
    name = prompt(text: "Device name: ")
    udid = prompt(text: "Device UDID: ")
    devices = {}
    devices[name] = udid

    app_store_connect_api_key
    register_devices(devices: devices)
end

private_lane :read_common_config do |options|
    key = options.fetch(:key, "")
    get_xcconfig_value(
        path: ENV['COMMON_XCCONFIG_PATH'],
        name: key
    )
end

private_lane :read_env_config do |options|
    key = options.fetch(:key, "")
    get_xcconfig_value(
        path: ENV['XCCONFIG_PATH'],
        name: key
    )
end

private_lane :code_signing do |options|
    readonly = options.fetch(:readonly, true)
    type = options.fetch(:type, "development")

    if !readonly
        app_store_connect_api_key
    end

    create_keychain(
        unlock: false,
        timeout: 0
    )
    sync_code_signing(
        type: type,
        force_for_new_devices: true,
        additional_cert_types: "mac_installer_distribution", # allows Catalyst, run destination "My Mac (Designed for iPhone)"
        readonly: readonly,
        app_identifier: read_env_config(key: "PRODUCT_BUNDLE_IDENTIFIER"),
        team_id: read_common_config(key: "DEV_TEAM")
    )
end

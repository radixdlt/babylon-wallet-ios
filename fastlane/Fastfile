fastlane_require 'dotenv'

before_all do
    Dotenv.load ".env.secret"
    ensure_git_status_clean
end

platform :ios do
    before_all do
        Dotenv.load ".env.ios"
    end

    desc "Builds and archives the app"
    lane :build do
        Dotenv.load ".env.ios.alpha"
        install_distribution_certificates
        build_app
    end

    desc "Runs test"
    lane :tests do
        Dotenv.load ".env.ios.dev"
        run_tests
    end

    desc "Deploy the app for a given flavour: alpha, beta, release"
    desc "Usage `bundle exec fastlane ios deploy --env ios.<specific env>`"
    lane :deploy do |options|
        install_distribution_certificates
        
        api_key = app_store_connect_api_key
        app_version = read_common_config(key: "APP_VERSION")
        build_number = latest_testflight_build_number(
            version: app_version,
            app_identifier: read_env_config(key: "PRODUCT_BUNDLE_IDENTIFIER"),
            initial_build_number: 0
        ) + 1
        increment_build_number(
            xcodeproj: ENV['PROJ_PATH'],
            build_number: build_number 
        )
        build_app
        upload_to_testflight(
            api_key: api_key
        )

        tag = "%s#%s-%s" % [app_version, build_number, ENV['FLAVOUR']]
        add_git_tag(tag: tag)
        push_to_git_remote
        if ENV['FLAVOUR'] == Beta
            create_beta_gh_release
        end
    end

    desc "Installs distribution certificates"
    desc "Usage `bundle exec fastlane ios install_distribution_certificate --env ios.<specific env>`"
    lane :install_distribution_certificates do
        code_signing(type: "appstore")
    end

    desc "Installs development certificates"
    lane :install_development_certificates do
        Dotenv.load ".env.ios.dev"
        code_signing(type: "development")
    end

    desc "Generate new dev certificates"
    lane :generate_new_dev_certificates do
        code_signing(type: "development", readonly: false)
    end

    desc "Generate new appstore certificates"
    desc "Usage bundle exec fastlane ios generate_new_appstore_certificates --env ios.<specific env>"
    lane :generate_new_appstore_certificates do
        code_signing(type: "appstore", readonly: false)
    end

    desc "Registers a new iPhone device and updates the certificates"
    lane :register_new_iphone_device do
        register_new_device
        generate_new_dev_certificates
    end

end

platform :mac do
    before_all do
        Dotenv.load ".env.mac"
    end

    desc "Runs tests"
    lane :tests do
        run_tests
    end

    desc "Installs certificates on the machine"
    lane :install_certificates do
        code_signing(type: "development")
    end

    desc "Generates new certificates if needed"
    lane :generate_new_certificates do
        code_signing(type: "development", readonly: false)
    end

    desc "Registers a new mac device and updates the certificates"
    lane :register_new_mac_device do
        register_new_device
        generate_new_certificates
    end
end

private_lane :create_beta_gh_release do
    sh('git fetch --tags')
    most_recent_tags = sh("git tag | grep 'Beta' | sort -r | head -2").split("\n")
    last_tag = most_recent_tags[0]
    rev_changelog = changelog_from_git_commits(
      between: most_recent_tags,
      pretty: "- %s",
      merge_commit_filtering: 'exclude_merges'
    )
    dependencies = read_json(
        json_path: ENV['SWIFT_PACKAGE_RESOLVED_PATH'] 
    )[:pins]

    core_deps = ["converse", "swift-engine-toolkit", "swift-profile", "bite", "mnemonic", "slip10", "swift-composable-architecture"]
    versions = Hash.new
    dependencies.each do |child|
        if core_deps.include? child[:identity]
            versions[child[:identity]] = child[:state][:version]
        end
    end
    versions_string = versions.map { |k, v| "- #{k}: #{v}" }.join("\n")
    release_description = "**Dependencies**: \n" + versions_string + "\n\n**Changelog**: \n" + rev_changelog

    set_github_release(
        repository_name: ENV['REPO_NAME'],
        api_token: ENV['GIT_TOKEN'] ,
        name: last_tag,
        tag_name: last_tag,
        description: release_description
    )
end

private_lane :register_new_device do |options|
    name = prompt(text: "Device name: ")
    udid = prompt(text: "Device UDID: ")
    devices = {}
    devices[name] = udid

    app_store_connect_api_key
    register_devices(devices: devices)
end

private_lane :read_common_config do |options|
    key = options.fetch(:key, "")
    get_xcconfig_value(
        path: ENV['COMMON_XCCONFIG_PATH'],
        name: key
    )
end

private_lane :read_env_config do |options|
    key = options.fetch(:key, "")
    get_xcconfig_value(
        path: ENV['XCCONFIG_PATH'],
        name: key
    )
end

private_lane :code_signing do |options|
    readonly = options.fetch(:readonly, true)
    type = options.fetch(:type, "development")

    if !readonly
        app_store_connect_api_key
    end

    create_keychain(
        unlock: false,
        timeout: 0
    ) 
    sync_code_signing(
        type: type,
        force_for_new_devices: true,
        readonly: readonly,
        app_identifier: read_env_config(key: "PRODUCT_BUNDLE_IDENTIFIER"),
        team_id: read_common_config(key: "DEV_TEAM")
    )
end

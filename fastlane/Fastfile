fastlane_require 'dotenv'

before_all do
    Dotenv.load ".env.secret"
    #ensure_git_status_clean
end

platform :ios do
    before_all do
        Dotenv.load ".env.ios"
    end

    desc "Builds and archives the app"
    lane :build do
        Dotenv.load ".env.ios.alpha"
        install_distribution_certificate
        build_app
    end

    desc "Runs test"
    lane :tests do
        run_tests
    end

    lane :alpha_deploy do 
        deploy(env: "alpha")
    end

    lane :beta_deploy do 
        deploy(env: "beta")
    end

    lane :release_deploy do
        deploy(env: "release")
    end

    lane :deploy do |options|
        env = options.fetch(:env, "alpha")
        dotfile = ".env.ios.%s" % [env]
        Dotenv.load dotfile

        install_distribution_certificate
        
        api_key = app_store_connect_api_key
        app_version = read_common_config(key: "APP_VERSION")
        build_number = latest_testflight_build_number(
            version: app_version,
            app_identifier: read_env_config(key: "PRODUCT_BUNDLE_IDENTIFIER"),
            initial_build_number: 0
        ) + 1
        increment_build_number(
            xcodeproj: ENV['PROJ_PATH'],
            build_number: build_number 
        )
        build_app
        upload_to_testflight(
            api_key: api_key
        )

        tag = "%s#%s %s" % [version, build_number, ENV['FLAVOUR']]
        add_git_tag(tag: version_and_build_number)
        push_to_git_remote
    end

    desc "Installs certificates on the machine"
    lane :install_certificates do
        Dotenv.load ".env.ios.alpha"
        install_development_certificate
        install_distribution_certificate
    end

    desc "Installs distribution certificate"
    lane :install_distribution_certificate do
        Dotenv.load ".env.ios.alpha"
        code_signing(type: "appstore")
    end

    desc "Installs development certificate"
    lane :install_development_certificate do
        Dotenv.load ".env.ios.alpha"
        code_signing(type: "development")
    end

    desc "Generates new certificates if needed"
    lane :generate_new_certificates do
        code_signing(type: "development", readonly: false)
        code_signing(type: "appstore", readonly: false)
    end

    desc "Generate new deve certificates"
    lane :generate_new_dev_certificates do
        Dotenv.load ".env.ios.dev"
        code_signing(type: "development", readonly: false)
    end

    desc "Generate new alpha certificates"
    lane :generate_new_alpha_certificates do
        Dotenv.load ".env.ios.alpha"
        code_signing(type: "development", readonly: false)
    end

    desc "Generate new beta certificates"
    lane :generate_new_beta_certificates do
        Dotenv.load ".env.ios.beta"
        code_signing(type: "appstore", readonly: false)
    end

    desc "Registers a new iPhone device and updates the certificates"
    lane :register_new_iphone_device do
        register_new_device
        generate_new_certificates
    end

end

platform :mac do
    before_all do
        Dotenv.load ".env.mac"
    end

    desc "Runs tests"
    lane :tests do
        run_tests
    end

    desc "Installs certificates on the machine"
    lane :install_certificates do
        code_signing(type: "development")
    end

    desc "Generates new certificates if needed"
    lane :generate_new_certificates do
        code_signing(type: "development", readonly: false)
    end

    desc "Registers a new mac device and updates the certificates"
    lane :register_new_mac_device do
        register_new_device
        generate_new_certificates
    end
end

private_lane :register_new_device do |options|
    name = prompt(text: "Device name: ")
    udid = prompt(text: "Device UDID: ")
    devices = {}
    devices[name] = udid

    app_store_connect_api_key
    register_devices(devices: devices)
end

private_lane :read_common_config do |options|
    key = options.fetch(:key, "")
    get_xcconfig_value(
        path: ENV['COMMON_XCCONFIG_PATH'],
        name: key
    )
end

private_lane :read_env_config do |options|
    key = options.fetch(:key, "")
    get_xcconfig_value(
        path: ENV['XCCONFIG_PATH'],
        name: key
    )
end

private_lane :code_signing do |options|
    readonly = options.fetch(:readonly, true)
    type = options.fetch(:type, "development")

    if !readonly
        app_store_connect_api_key
    end

    create_keychain(
        unlock: false,
        timeout: 0
    ) 
    sync_code_signing(
        type: type,
        force_for_new_devices: true,
        readonly: readonly,
        app_identifier: read_env_config(key: "PRODUCT_BUNDLE_IDENTIFIER"),
        team_id: read_common_config(key: "DEV_TEAM")
    )
end

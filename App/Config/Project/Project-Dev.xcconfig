// Project Dev config

#include "Project-Shared.xcconfig"

// Primary App Icon Set Name
//
// Name of an app icon set for the target's default app icon. The contents will be merged
// into the `Info.plist`.

ASSETCATALOG_COMPILER_APPICON_NAME = $(APP_ICON).dev



// Product name
//
// This is the basename of the product generated by the target.
PRODUCT_NAME = $(APP_NAME) Dev



// MARK: - Debug optimization


// Debug Information Format
//
// The type of debug information to produce.
//
// * DWARF: Object files and linked products will use DWARF as the debug information
// format. [dwarf]
// * DWARF with dSYM File: Object files and linked products will use DWARF as the debug
// information format, and Xcode will also produce a dSYM file containing the debug
// information from the individual object files (except that a dSYM file is not needed
// and will not be created for static library or object file products). [dwarf-with-dsym]

DEBUG_INFORMATION_FORMAT = dwarf



// Enable Testability
//
// When this setting is activated, the product will be built with options appropriate for
// running automated tests, such as making private interfaces accessible to the tests.
// This may result in tests running slower than they would without testability enabled.

ENABLE_TESTABILITY = YES



// Generate Position-Dependent Code
//
// Faster function calls for applications. Not appropriate for shared libraries, which
// need to be position-independent.

GCC_DYNAMIC_NO_PIC = NO



// Optimization Level
//
// Specifies the degree to which the generated code is optimized for speed and binary
// size.
//
// * None: Do not optimize. [-O0]
// With this setting, the compiler's goal is to reduce the cost of compilation and to
// make debugging produce the expected results. Statements are independentâ€”if you stop
// the program with a breakpoint between statements, you can then assign a new value to
// any variable or change the program counter to any other statement in the function and
// get exactly the results you would expect from the source code.
// * Fast: Optimizing compilation takes somewhat more time, and a lot more memory for a
// large function. [-O1]
// With this setting, the compiler tries to reduce code size and execution time,
// without performing any optimizations that take a great deal of compilation time. In
// Apple's compiler, strict aliasing, block reordering, and inter-block scheduling are
// disabled by default when optimizing.
// * Faster: The compiler performs nearly all supported optimizations that do not
// involve a space-speed tradeoff. [-O2]
// With this setting, the compiler does not perform loop unrolling or function
// inlining, or register renaming. As compared to the `Fast` setting, this setting
// increases both compilation time and the performance of the generated code.
// * Fastest: Turns on all optimizations specified by the `Faster` setting and also
// turns on function inlining and register renaming options. This setting may result in a
// larger binary. [-O3]
// * Fastest, Smallest: Optimize for size. This setting enables all `Faster`
// optimizations that do not typically increase code size. It also performs further
// optimizations designed to reduce code size. [-Os]
// * Fastest, Aggressive Optimizations: This setting enables `Fastest` but also enables
// aggressive optimizations that may break strict standards compliance but should work
// well on well-behaved code. [-Ofast]
// * Smallest, Aggressive Size Optimizations: This setting enables additional size
// savings by isolating repetitive code patterns into a compiler generated function.
// [-Oz]

GCC_OPTIMIZATION_LEVEL = 0



// Preprocessor Macros
//
// Space-separated list of preprocessor macros of the form `foo` or `foo=bar`.

GCC_PREPROCESSOR_DEFINITIONS = DEBUG=1 $(inherited)



// Produce Debugging Information
//
// Debugging information is required for shader debugging and profiling.

MTL_ENABLE_DEBUG_INFO = INCLUDE_SOURCE



// Build Active Architecture Only
//
// If enabled, only the active architecture is built. This setting will be ignored when
// building with a run destination which does not define a specific architecture, such as
// a 'Generic Device' run destination.

ONLY_ACTIVE_ARCH = YES



// Active Compilation Conditions
//
// A list of compilation conditions to enable for conditional compilation expressions.

SWIFT_ACTIVE_COMPILATION_CONDITIONS = DEBUG



// Swift Optimization Level
//
// * None: Compile without any optimization. [-Onone]
// * Optimize for Speed: [-O]
// * Optimize for Size: [-Osize]
// * Whole Module Optimization: [-O -whole-module-optimization]

SWIFT_OPTIMIZATION_LEVEL = -Onone

import Foundation

// MARK: - WebRTCICECandidate
/// A Swift wrapper around the [RTCIceCandidate][RTCIceCandidate] primitive, originating from `RTCPeerConnection`,
/// generated by its state machine, see [`didGenerateIceCandidate`][didGenerateIceCandidate] (ObjC func).
///
/// [didGenerateIceCandidate]: https://webrtc.googlesource.com/src/+/refs/heads/main/sdk/objc/api/peerconnection/RTCPeerConnection.h#123
/// [RTCIceCandidate]: https://webrtc.googlesource.com/src/+/refs/heads/main/sdk/objc/api/peerconnection/RTCIceCandidate.h
///
public struct WebRTCICECandidate: WebRTCPrimitiveProtocol {
	/// The [Session Description Protocol][sdp] string of this WebRTC `WebRTCICECandidate`.
	///
	/// [sdp]: https://developer.mozilla.org/en-US/docs/Glossary/SDP
	///
	public let candidate: String

	/**
	 * If present, the identifier of the "media stream identification" for the media
	 * component this candidate is associated with.
	 */
	public let sdpMid: String?

	/// The index (starting at zero) of the media description this candidate is associated with in the SDP.
	public let sdpMLineIndex: Int

	/// The URL of the ICE server which this candidate is gathered from
	public let serverUrl: String?

	public init(
		sdp candidate: String,
		sdpMid: String?,
		sdpMLineIndex: Int,
		serverUrl: String?
	) {
		self.candidate = candidate
		self.sdpMid = sdpMid
		self.sdpMLineIndex = sdpMLineIndex
		self.serverUrl = serverUrl
	}
}

extension WebRTCICECandidate {
	public var sdp: String { candidate }

	public var description: String {
		description(includeTypeName: true)
	}

	public func description(includeTypeName: Bool) -> String {
		let props = "sdpMLineIndex: \(sdpMLineIndex), sdpMid: \(String(describing: sdpMid)), sdp: \(sdp)), serverUrl: \(String(describing: serverUrl))"
		guard includeTypeName else {
			return props
		}
		return "ICECandidate(\(props))"
	}
}

#if DEBUG
extension WebRTCICECandidate {
	public static func placeholder(index: Int = 0) -> Self {
		Self(sdp: "<ICE SDP GOES HERE>", sdpMid: nil, sdpMLineIndex: index, serverUrl: URL.placeholder.absoluteString)
	}

	public static let placeholder = Self.placeholder()
}
#endif // DEBUG

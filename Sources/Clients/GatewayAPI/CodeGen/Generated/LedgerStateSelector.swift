//
// LedgerStateSelector.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

@available(*, deprecated, renamed: "GatewayAPI.LedgerStateSelector")
public typealias LedgerStateSelector = GatewayAPI.LedgerStateSelector

// MARK: - GatewayAPI.LedgerStateSelector
public extension GatewayAPI {
	/** Allows a client to request a response referencing an earlier (&#x60;at_*&#x60; properties) or later (&#x60;from_*&#x60; properties) ledger state. */
	struct LedgerStateSelector: Codable, Hashable {
		/** If the version is provided, the latest ledger state <= the given version is returned. */
		public private(set) var stateVersion: Int64?
		/** If a timestamp is provided, the latest ledger state <= the given timestamp is returned. */
		public private(set) var timestamp: Date?
		/** If an epoch is provided, the ledger state at the given epoch <= the given round (else round 0) is returned. */
		public private(set) var epoch: Int64?
		public private(set) var round: Int64?

		public init(stateVersion: Int64? = nil, timestamp: Date? = nil, epoch: Int64? = nil, round: Int64? = nil) {
			self.stateVersion = stateVersion
			self.timestamp = timestamp
			self.epoch = epoch
			self.round = round
		}

		public enum CodingKeys: String, CodingKey, CaseIterable {
			case stateVersion = "state_version"
			case timestamp
			case epoch
			case round
		}

		// Encodable protocol methods

		public func encode(to encoder: Encoder) throws {
			var container = encoder.container(keyedBy: CodingKeys.self)
			try container.encodeIfPresent(stateVersion, forKey: .stateVersion)
			try container.encodeIfPresent(timestamp, forKey: .timestamp)
			try container.encodeIfPresent(epoch, forKey: .epoch)
			try container.encodeIfPresent(round, forKey: .round)
		}
	}
}

//
// EntityDetailsResponseDetails.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

@available(*, deprecated, renamed: "GatewayAPI.EntityDetailsResponseDetails")
public typealias EntityDetailsResponseDetails = GatewayAPI.EntityDetailsResponseDetails

// MARK: - GatewayAPI.EntityDetailsResponseDetails
public extension GatewayAPI {
	enum EntityDetailsResponseDetails: Codable, JSONEncodable, Hashable {
		case typeEntityDetailsResponseComponentDetails(EntityDetailsResponseComponentDetails)
		case typeEntityDetailsResponseFungibleResourceDetails(EntityDetailsResponseFungibleResourceDetails)
		case typeEntityDetailsResponseNonFungibleResourceDetails(EntityDetailsResponseNonFungibleResourceDetails)
		case typeEntityDetailsResponsePackageDetails(EntityDetailsResponsePackageDetails)

		public func encode(to encoder: Encoder) throws {
			var container = encoder.singleValueContainer()
			switch self {
			case let .typeEntityDetailsResponseComponentDetails(value):
				try container.encode(value)
			case let .typeEntityDetailsResponseFungibleResourceDetails(value):
				try container.encode(value)
			case let .typeEntityDetailsResponseNonFungibleResourceDetails(value):
				try container.encode(value)
			case let .typeEntityDetailsResponsePackageDetails(value):
				try container.encode(value)
			}
		}

		public init(from decoder: Decoder) throws {
			let container = try decoder.singleValueContainer()
			if let value = try? container.decode(EntityDetailsResponseComponentDetails.self) {
				self = .typeEntityDetailsResponseComponentDetails(value)
			} else if let value = try? container.decode(EntityDetailsResponseFungibleResourceDetails.self) {
				self = .typeEntityDetailsResponseFungibleResourceDetails(value)
			} else if let value = try? container.decode(EntityDetailsResponseNonFungibleResourceDetails.self) {
				self = .typeEntityDetailsResponseNonFungibleResourceDetails(value)
			} else if let value = try? container.decode(EntityDetailsResponsePackageDetails.self) {
				self = .typeEntityDetailsResponsePackageDetails(value)
			} else {
				throw DecodingError.typeMismatch(Self.Type.self, .init(codingPath: decoder.codingPath, debugDescription: "Unable to decode instance of EntityDetailsResponseDetails"))
			}
		}
	}
}

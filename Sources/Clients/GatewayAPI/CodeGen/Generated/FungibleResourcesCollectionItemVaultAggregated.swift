//
// FungibleResourcesCollectionItemVaultAggregated.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

@available(*, deprecated, renamed: "GatewayAPI.FungibleResourcesCollectionItemVaultAggregated")
public typealias FungibleResourcesCollectionItemVaultAggregated = GatewayAPI.FungibleResourcesCollectionItemVaultAggregated

extension GatewayAPI {

public struct FungibleResourcesCollectionItemVaultAggregated: Codable, Hashable {

    /** Bech32m-encoded human readable version of the address. */
    public private(set) var resourceAddress: String
    public private(set) var explicitMetadata: EntityMetadataCollection?
    public private(set) var vaults: FungibleResourcesCollectionItemVaultAggregatedVault

    public init(resourceAddress: String, explicitMetadata: EntityMetadataCollection? = nil, vaults: FungibleResourcesCollectionItemVaultAggregatedVault) {
        self.resourceAddress = resourceAddress
        self.explicitMetadata = explicitMetadata
        self.vaults = vaults
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case resourceAddress = "resource_address"
        case explicitMetadata = "explicit_metadata"
        case vaults
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(resourceAddress, forKey: .resourceAddress)
        try container.encodeIfPresent(explicitMetadata, forKey: .explicitMetadata)
        try container.encode(vaults, forKey: .vaults)
    }
}

}

//
// FeeSummary.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

@available(*, deprecated, renamed: "GatewayAPI.FeeSummary")
public typealias FeeSummary = GatewayAPI.FeeSummary

extension GatewayAPI {

/** Fees paid */
public struct FeeSummary: Codable, Hashable {

    /** The string-encoded decimal representing the XRD price of a single cost unit. A decimal is formed of some signed integer `m` of attos (`10^(-18)`) units, where `-2^(256 - 1) <= m < 2^(256 - 1)`.  */
    public private(set) var costUnitPrice: String
    /** An integer between `0` and `255`, giving the validator tip as a percentage amount. A value of `1` corresponds to 1% of the fee. */
    public private(set) var tipPercentage: Int
    /** An integer between `0` and `2^32 - 1`, representing the maximum amount of cost units available for the transaction execution. */
    public private(set) var costUnitLimit: Int64
    /** An integer between `0` and `2^32 - 1`, representing the amount of cost units consumed by the transaction execution. */
    public private(set) var costUnitsConsumed: Int64
    /** A breakdown of where the execution cost went.  */
    public private(set) var costUnitExecutionBreakdown: [String: Int64]
    /** The string-encoded decimal representing the total amount of XRD burned in the transaction as part of execution costs. A decimal is formed of some signed integer `m` of attos (`10^(-18)`) units, where `-2^(256 - 1) <= m < 2^(256 - 1)`.  */
    public private(set) var xrdTotalExecutionCost: String
    /** The string-encoded decimal representing the total amount of XRD paid in royalties as part of the transaction. A decimal is formed of some signed integer `m` of attos (`10^(-18)`) units, where `-2^(256 - 1) <= m < 2^(256 - 1)`.  */
    public private(set) var xrdTotalRoyaltyCost: String
    /** The string-encoded decimal representing the total amount of XRD tipped to validators in the transaction. A decimal is formed of some signed integer `m` of attos (`10^(-18)`) units, where `-2^(256 - 1) <= m < 2^(256 - 1)`.  */
    public private(set) var xrdTotalTipped: String
    /** A breakdown of which vaults were used to pay the fee.  */
    public private(set) var xrdVaultPayments: [VaultPayment]
    /** A breakdown of where the royalties were paid to.  */
    public private(set) var xrdRoyaltyReceivers: [RoyaltyPayment]

    public init(costUnitPrice: String, tipPercentage: Int, costUnitLimit: Int64, costUnitsConsumed: Int64, costUnitExecutionBreakdown: [String: Int64], xrdTotalExecutionCost: String, xrdTotalRoyaltyCost: String, xrdTotalTipped: String, xrdVaultPayments: [VaultPayment], xrdRoyaltyReceivers: [RoyaltyPayment]) {
        self.costUnitPrice = costUnitPrice
        self.tipPercentage = tipPercentage
        self.costUnitLimit = costUnitLimit
        self.costUnitsConsumed = costUnitsConsumed
        self.costUnitExecutionBreakdown = costUnitExecutionBreakdown
        self.xrdTotalExecutionCost = xrdTotalExecutionCost
        self.xrdTotalRoyaltyCost = xrdTotalRoyaltyCost
        self.xrdTotalTipped = xrdTotalTipped
        self.xrdVaultPayments = xrdVaultPayments
        self.xrdRoyaltyReceivers = xrdRoyaltyReceivers
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case costUnitPrice = "cost_unit_price"
        case tipPercentage = "tip_percentage"
        case costUnitLimit = "cost_unit_limit"
        case costUnitsConsumed = "cost_units_consumed"
        case costUnitExecutionBreakdown = "cost_unit_execution_breakdown"
        case xrdTotalExecutionCost = "xrd_total_execution_cost"
        case xrdTotalRoyaltyCost = "xrd_total_royalty_cost"
        case xrdTotalTipped = "xrd_total_tipped"
        case xrdVaultPayments = "xrd_vault_payments"
        case xrdRoyaltyReceivers = "xrd_royalty_receivers"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(costUnitPrice, forKey: .costUnitPrice)
        try container.encode(tipPercentage, forKey: .tipPercentage)
        try container.encode(costUnitLimit, forKey: .costUnitLimit)
        try container.encode(costUnitsConsumed, forKey: .costUnitsConsumed)
        try container.encode(costUnitExecutionBreakdown, forKey: .costUnitExecutionBreakdown)
        try container.encode(xrdTotalExecutionCost, forKey: .xrdTotalExecutionCost)
        try container.encode(xrdTotalRoyaltyCost, forKey: .xrdTotalRoyaltyCost)
        try container.encode(xrdTotalTipped, forKey: .xrdTotalTipped)
        try container.encode(xrdVaultPayments, forKey: .xrdVaultPayments)
        try container.encode(xrdRoyaltyReceivers, forKey: .xrdRoyaltyReceivers)
    }
}

}

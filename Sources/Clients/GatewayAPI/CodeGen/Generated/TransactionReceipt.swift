//
// TransactionReceipt.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

// MARK: - TransactionReceipt
/** The transaction execution receipt */
public struct TransactionReceipt: Codable, Hashable {
	public private(set) var status: TransactionStatus
	public private(set) var feeSummary: FeeSummary
	public private(set) var stateUpdates: StateUpdates
	/** The manifest line-by-line engine return data (only present if status is Succeeded) */
	public private(set) var output: [SborData]?
	/** Error message (only present if status is Failed or Rejected) */
	public private(set) var errorMessage: String?

	public init(status: TransactionStatus, feeSummary: FeeSummary, stateUpdates: StateUpdates, output: [SborData]? = nil, errorMessage: String? = nil) {
		self.status = status
		self.feeSummary = feeSummary
		self.stateUpdates = stateUpdates
		self.output = output
		self.errorMessage = errorMessage
	}

	public enum CodingKeys: String, CodingKey, CaseIterable {
		case status
		case feeSummary = "fee_summary"
		case stateUpdates = "state_updates"
		case output
		case errorMessage = "error_message"
	}

	// Encodable protocol methods

	public func encode(to encoder: Encoder) throws {
		var container = encoder.container(keyedBy: CodingKeys.self)
		try container.encode(status, forKey: .status)
		try container.encode(feeSummary, forKey: .feeSummary)
		try container.encode(stateUpdates, forKey: .stateUpdates)
		try container.encodeIfPresent(output, forKey: .output)
		try container.encodeIfPresent(errorMessage, forKey: .errorMessage)
	}
}

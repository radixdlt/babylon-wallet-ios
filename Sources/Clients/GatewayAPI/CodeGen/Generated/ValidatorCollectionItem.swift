//
// ValidatorCollectionItem.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

@available(*, deprecated, renamed: "GatewayAPI.ValidatorCollectionItem")
public typealias ValidatorCollectionItem = GatewayAPI.ValidatorCollectionItem

// MARK: - GatewayAPI.ValidatorCollectionItem
extension GatewayAPI {
	public struct ValidatorCollectionItem: Codable, Hashable {
		/** Bech32m-encoded human readable version of the entity's global address. */
		public private(set) var address: String
		public private(set) var state: AnyCodable?
		public private(set) var activeInEpoch: ValidatorCollectionItemActiveInEpoch?
		public private(set) var metadata: EntityMetadataCollection

		public init(address: String, state: AnyCodable? = nil, activeInEpoch: ValidatorCollectionItemActiveInEpoch? = nil, metadata: EntityMetadataCollection) {
			self.address = address
			self.state = state
			self.activeInEpoch = activeInEpoch
			self.metadata = metadata
		}

		public enum CodingKeys: String, CodingKey, CaseIterable {
			case address
			case state
			case activeInEpoch = "active_in_epoch"
			case metadata
		}

		// Encodable protocol methods

		public func encode(to encoder: Encoder) throws {
			var container = encoder.container(keyedBy: CodingKeys.self)
			try container.encode(address, forKey: .address)
			try container.encodeIfPresent(state, forKey: .state)
			try container.encodeIfPresent(activeInEpoch, forKey: .activeInEpoch)
			try container.encode(metadata, forKey: .metadata)
		}
	}
}

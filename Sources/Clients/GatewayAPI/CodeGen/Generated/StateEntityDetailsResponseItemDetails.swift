//
// StateEntityDetailsResponseItemDetails.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

@available(*, deprecated, renamed: "GatewayAPI.StateEntityDetailsResponseItemDetails")
public typealias StateEntityDetailsResponseItemDetails = GatewayAPI.StateEntityDetailsResponseItemDetails

extension GatewayAPI {

public enum StateEntityDetailsResponseItemDetails: Codable, JSONEncodable, Hashable {
    case typeAnyCodable(AnyCodable)
    case typeStateEntityDetailsResponseComponentDetails(StateEntityDetailsResponseComponentDetails)
    case typeStateEntityDetailsResponseFungibleResourceDetails(StateEntityDetailsResponseFungibleResourceDetails)
    case typeStateEntityDetailsResponseNonFungibleResourceDetails(StateEntityDetailsResponseNonFungibleResourceDetails)
    case typeStateEntityDetailsResponsePackageDetails(StateEntityDetailsResponsePackageDetails)

    public func encode(to encoder: Encoder) throws {
        var container = encoder.singleValueContainer()
        switch self {
        case .typeAnyCodable(let value):
            try container.encode(value)
        case .typeStateEntityDetailsResponseComponentDetails(let value):
            try container.encode(value)
        case .typeStateEntityDetailsResponseFungibleResourceDetails(let value):
            try container.encode(value)
        case .typeStateEntityDetailsResponseNonFungibleResourceDetails(let value):
            try container.encode(value)
        case .typeStateEntityDetailsResponsePackageDetails(let value):
            try container.encode(value)
        }
    }

    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        if let value = try? container.decode(AnyCodable.self) {
            self = .typeAnyCodable(value)
        } else if let value = try? container.decode(StateEntityDetailsResponseComponentDetails.self) {
            self = .typeStateEntityDetailsResponseComponentDetails(value)
        } else if let value = try? container.decode(StateEntityDetailsResponseFungibleResourceDetails.self) {
            self = .typeStateEntityDetailsResponseFungibleResourceDetails(value)
        } else if let value = try? container.decode(StateEntityDetailsResponseNonFungibleResourceDetails.self) {
            self = .typeStateEntityDetailsResponseNonFungibleResourceDetails(value)
        } else if let value = try? container.decode(StateEntityDetailsResponsePackageDetails.self) {
            self = .typeStateEntityDetailsResponsePackageDetails(value)
        } else {
            throw DecodingError.typeMismatch(Self.Type.self, .init(codingPath: decoder.codingPath, debugDescription: "Unable to decode instance of StateEntityDetailsResponseItemDetails"))
        }
    }
}

}

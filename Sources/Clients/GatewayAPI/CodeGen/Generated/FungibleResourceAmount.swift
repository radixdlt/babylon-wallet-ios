//
// FungibleResourceAmount.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

// MARK: - FungibleResourceAmount
public struct FungibleResourceAmount: Codable, Hashable {
	public private(set) var resourceType: ResourceType
	/** The Bech32m-encoded human readable version of the resource address */
	public private(set) var resourceAddress: String
	/** The string-encoded decimal subunits of the amount (10^-18) in a signed 256-bit integer. This is string-encoded as it doesn't fit well into common numeric types.  */
	public private(set) var amountAttos: String

	public init(resourceType: ResourceType, resourceAddress: String, amountAttos: String) {
		self.resourceType = resourceType
		self.resourceAddress = resourceAddress
		self.amountAttos = amountAttos
	}

	public enum CodingKeys: String, CodingKey, CaseIterable {
		case resourceType = "resource_type"
		case resourceAddress = "resource_address"
		case amountAttos = "amount_attos"
	}

	// Encodable protocol methods

	public func encode(to encoder: Encoder) throws {
		var container = encoder.container(keyedBy: CodingKeys.self)
		try container.encode(resourceType, forKey: .resourceType)
		try container.encode(resourceAddress, forKey: .resourceAddress)
		try container.encode(amountAttos, forKey: .amountAttos)
	}
}

//
// EntityNonFungibleIdsResponse.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import ClientPrelude
#if canImport(AnyCodable)
import AnyCodable
#endif

@available(*, deprecated, renamed: "GatewayAPI.EntityNonFungibleIdsResponse")
public typealias EntityNonFungibleIdsResponse = GatewayAPI.EntityNonFungibleIdsResponse

// MARK: - GatewayAPI.EntityNonFungibleIdsResponse
public extension GatewayAPI {
	struct EntityNonFungibleIdsResponse: Codable, Hashable {
		public private(set) var ledgerState: LedgerState
		/** The Bech32m-encoded human readable version of the entity's global address. */
		public private(set) var address: String
		/** The Bech32m-encoded human readable version of the resource (fungible, non-fungible) global address. */
		public private(set) var resourceAddress: String
		public private(set) var nonFungibleIds: NonFungibleIdsCollection

		public init(ledgerState: LedgerState, address: String, resourceAddress: String, nonFungibleIds: NonFungibleIdsCollection) {
			self.ledgerState = ledgerState
			self.address = address
			self.resourceAddress = resourceAddress
			self.nonFungibleIds = nonFungibleIds
		}

		public enum CodingKeys: String, CodingKey, CaseIterable {
			case ledgerState = "ledger_state"
			case address
			case resourceAddress = "resource_address"
			case nonFungibleIds = "non_fungible_ids"
		}

		// Encodable protocol methods

		public func encode(to encoder: Encoder) throws {
			var container = encoder.container(keyedBy: CodingKeys.self)
			try container.encode(ledgerState, forKey: .ledgerState)
			try container.encode(address, forKey: .address)
			try container.encode(resourceAddress, forKey: .resourceAddress)
			try container.encode(nonFungibleIds, forKey: .nonFungibleIds)
		}
	}
}

//
// EntityAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

// MARK: - GatewayAPI.EntityAPI
extension GatewayAPI {
	open class EntityAPI {
		/**
		 Entity Details

		 - parameter entityDetailsRequest: (body)
		 - parameter apiResponseQueue: The queue on which api response is dispatched.
		 - parameter completion: completion handler to receive the data and the error objects
		 */
		@discardableResult
		open class func entityDetails(entityDetailsRequest: EntityDetailsRequest, apiResponseQueue: DispatchQueue = GatewayAPI.apiResponseQueue, completion: @escaping ((_ data: EntityDetailsResponse?, _ error: Error?) -> Void)) -> RequestTask {
			entityDetailsWithRequestBuilder(entityDetailsRequest: entityDetailsRequest).execute(apiResponseQueue) { result in
				switch result {
				case let .success(response):
					completion(response.body, nil)
				case let .failure(error):
					completion(nil, error)
				}
			}
		}

		/**
		 Entity Details
		 - POST /entity/details
		 - TBD
		 - parameter entityDetailsRequest: (body)
		 - returns: RequestBuilder<EntityDetailsResponse>
		 */
		open class func entityDetailsWithRequestBuilder(entityDetailsRequest: EntityDetailsRequest) -> RequestBuilder<EntityDetailsResponse> {
			let localVariablePath = "/entity/details"
			let localVariableURLString = GatewayAPI.basePath + localVariablePath
			let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: entityDetailsRequest)

			let localVariableUrlComponents = URLComponents(string: localVariableURLString)

			let localVariableNillableHeaders: [String: Any?] = [:]

			let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

			let localVariableRequestBuilder: RequestBuilder<EntityDetailsResponse>.Type = GatewayAPI.requestBuilderFactory.getBuilder()

			return localVariableRequestBuilder.init(method: "POST", URLString: localVariableUrlComponents?.string ?? localVariableURLString, parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
		}

		/**
		 Entity Metadata

		 - parameter entityMetadataRequest: (body)
		 - parameter apiResponseQueue: The queue on which api response is dispatched.
		 - parameter completion: completion handler to receive the data and the error objects
		 */
		@discardableResult
		open class func entityMetadata(entityMetadataRequest: EntityMetadataRequest, apiResponseQueue: DispatchQueue = GatewayAPI.apiResponseQueue, completion: @escaping ((_ data: EntityMetadataResponse?, _ error: Error?) -> Void)) -> RequestTask {
			entityMetadataWithRequestBuilder(entityMetadataRequest: entityMetadataRequest).execute(apiResponseQueue) { result in
				switch result {
				case let .success(response):
					completion(response.body, nil)
				case let .failure(error):
					completion(nil, error)
				}
			}
		}

		/**
		 Entity Metadata
		 - POST /entity/metadata
		 - TBD
		 - parameter entityMetadataRequest: (body)
		 - returns: RequestBuilder<EntityMetadataResponse>
		 */
		open class func entityMetadataWithRequestBuilder(entityMetadataRequest: EntityMetadataRequest) -> RequestBuilder<EntityMetadataResponse> {
			let localVariablePath = "/entity/metadata"
			let localVariableURLString = GatewayAPI.basePath + localVariablePath
			let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: entityMetadataRequest)

			let localVariableUrlComponents = URLComponents(string: localVariableURLString)

			let localVariableNillableHeaders: [String: Any?] = [:]

			let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

			let localVariableRequestBuilder: RequestBuilder<EntityMetadataResponse>.Type = GatewayAPI.requestBuilderFactory.getBuilder()

			return localVariableRequestBuilder.init(method: "POST", URLString: localVariableUrlComponents?.string ?? localVariableURLString, parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
		}

		/**
		 Entity Overview

		 - parameter entityOverviewRequest: (body)
		 - parameter apiResponseQueue: The queue on which api response is dispatched.
		 - parameter completion: completion handler to receive the data and the error objects
		 */
		@discardableResult
		open class func entityOverview(entityOverviewRequest: EntityOverviewRequest, apiResponseQueue: DispatchQueue = GatewayAPI.apiResponseQueue, completion: @escaping ((_ data: EntityOverviewResponse?, _ error: Error?) -> Void)) -> RequestTask {
			entityOverviewWithRequestBuilder(entityOverviewRequest: entityOverviewRequest).execute(apiResponseQueue) { result in
				switch result {
				case let .success(response):
					completion(response.body, nil)
				case let .failure(error):
					completion(nil, error)
				}
			}
		}

		/**
		 Entity Overview
		 - POST /entity/overview
		 - TBD
		 - parameter entityOverviewRequest: (body)
		 - returns: RequestBuilder<EntityOverviewResponse>
		 */
		open class func entityOverviewWithRequestBuilder(entityOverviewRequest: EntityOverviewRequest) -> RequestBuilder<EntityOverviewResponse> {
			let localVariablePath = "/entity/overview"
			let localVariableURLString = GatewayAPI.basePath + localVariablePath
			let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: entityOverviewRequest)

			let localVariableUrlComponents = URLComponents(string: localVariableURLString)

			let localVariableNillableHeaders: [String: Any?] = [:]

			let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

			let localVariableRequestBuilder: RequestBuilder<EntityOverviewResponse>.Type = GatewayAPI.requestBuilderFactory.getBuilder()

			return localVariableRequestBuilder.init(method: "POST", URLString: localVariableUrlComponents?.string ?? localVariableURLString, parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
		}

		/**
		 Entity Resources

		 - parameter entityResourcesRequest: (body)
		 - parameter apiResponseQueue: The queue on which api response is dispatched.
		 - parameter completion: completion handler to receive the data and the error objects
		 */
		@discardableResult
		open class func entityResources(entityResourcesRequest: EntityResourcesRequest, apiResponseQueue: DispatchQueue = GatewayAPI.apiResponseQueue, completion: @escaping ((_ data: EntityResourcesResponse?, _ error: Error?) -> Void)) -> RequestTask {
			entityResourcesWithRequestBuilder(entityResourcesRequest: entityResourcesRequest).execute(apiResponseQueue) { result in
				switch result {
				case let .success(response):
					completion(response.body, nil)
				case let .failure(error):
					completion(nil, error)
				}
			}
		}

		/**
		 Entity Resources
		 - POST /entity/resources
		 - TBD
		 - parameter entityResourcesRequest: (body)
		 - returns: RequestBuilder<EntityResourcesResponse>
		 */
		open class func entityResourcesWithRequestBuilder(entityResourcesRequest: EntityResourcesRequest) -> RequestBuilder<EntityResourcesResponse> {
			let localVariablePath = "/entity/resources"
			let localVariableURLString = GatewayAPI.basePath + localVariablePath
			let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: entityResourcesRequest)

			let localVariableUrlComponents = URLComponents(string: localVariableURLString)

			let localVariableNillableHeaders: [String: Any?] = [:]

			let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

			let localVariableRequestBuilder: RequestBuilder<EntityResourcesResponse>.Type = GatewayAPI.requestBuilderFactory.getBuilder()

			return localVariableRequestBuilder.init(method: "POST", URLString: localVariableUrlComponents?.string ?? localVariableURLString, parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
		}
	}
}

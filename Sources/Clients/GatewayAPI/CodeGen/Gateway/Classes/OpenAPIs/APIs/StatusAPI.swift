//
// StatusAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

// MARK: - GatewayAPI.StatusAPI
extension GatewayAPI {
	open class StatusAPI {
		/**
		 Get Gateway Info

		 - parameter body: (body)
		 - parameter apiResponseQueue: The queue on which api response is dispatched.
		 - parameter completion: completion handler to receive the data and the error objects
		 */
		@discardableResult
		open class func gatewayInfo(body: AnyCodable, apiResponseQueue: DispatchQueue = GatewayAPI.apiResponseQueue, completion: @escaping ((_ data: GatewayInfoResponse?, _ error: Error?) -> Void)) -> RequestTask {
			gatewayInfoWithRequestBuilder(body: body).execute(apiResponseQueue) { result in
				switch result {
				case let .success(response):
					completion(response.body, nil)
				case let .failure(error):
					completion(nil, error)
				}
			}
		}

		/**
		 Get Gateway Info
		 - POST /gateway
		 - Returns the Gateway API version, network and current ledger state.
		 - parameter body: (body)
		 - returns: RequestBuilder<GatewayInfoResponse>
		 */
		open class func gatewayInfoWithRequestBuilder(body: AnyCodable) -> RequestBuilder<GatewayInfoResponse> {
			let localVariablePath = "/gateway"
			let localVariableURLString = GatewayAPI.basePath + localVariablePath
			let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

			let localVariableUrlComponents = URLComponents(string: localVariableURLString)

			let localVariableNillableHeaders: [String: Any?] = [:]

			let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

			let localVariableRequestBuilder: RequestBuilder<GatewayInfoResponse>.Type = GatewayAPI.requestBuilderFactory.getBuilder()

			return localVariableRequestBuilder.init(method: "POST", URLString: localVariableUrlComponents?.string ?? localVariableURLString, parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
		}
	}
}

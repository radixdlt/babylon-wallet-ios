//
// TransactionAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

// MARK: - GatewayAPI.TransactionAPI
extension GatewayAPI {
	open class TransactionAPI {
		/**
		 Preview Transaction

		 - parameter body: (body)
		 - parameter apiResponseQueue: The queue on which api response is dispatched.
		 - parameter completion: completion handler to receive the data and the error objects
		 */
		@discardableResult
		open class func previewTransaction(body: AnyCodable, apiResponseQueue: DispatchQueue = GatewayAPI.apiResponseQueue, completion: @escaping ((_ data: AnyCodable?, _ error: Error?) -> Void)) -> RequestTask {
			previewTransactionWithRequestBuilder(body: body).execute(apiResponseQueue) { result in
				switch result {
				case let .success(response):
					completion(response.body, nil)
				case let .failure(error):
					completion(nil, error)
				}
			}
		}

		/**
		 Preview Transaction
		 - POST /transaction/preview
		 - Previews transaction against the network.
		 - parameter body: (body)
		 - returns: RequestBuilder<AnyCodable>
		 */
		open class func previewTransactionWithRequestBuilder(body: AnyCodable) -> RequestBuilder<AnyCodable> {
			let localVariablePath = "/transaction/preview"
			let localVariableURLString = GatewayAPI.basePath + localVariablePath
			let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

			let localVariableUrlComponents = URLComponents(string: localVariableURLString)

			let localVariableNillableHeaders: [String: Any?] = [:]

			let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

			let localVariableRequestBuilder: RequestBuilder<AnyCodable>.Type = GatewayAPI.requestBuilderFactory.getBuilder()

			return localVariableRequestBuilder.init(method: "POST", URLString: localVariableUrlComponents?.string ?? localVariableURLString, parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
		}

		/**
		 Get Recent Transactions

		 - parameter recentTransactionsRequest: (body)
		 - parameter apiResponseQueue: The queue on which api response is dispatched.
		 - parameter completion: completion handler to receive the data and the error objects
		 */
		@discardableResult
		open class func recentTransactions(recentTransactionsRequest: RecentTransactionsRequest, apiResponseQueue: DispatchQueue = GatewayAPI.apiResponseQueue, completion: @escaping ((_ data: RecentTransactionsResponse?, _ error: Error?) -> Void)) -> RequestTask {
			recentTransactionsWithRequestBuilder(recentTransactionsRequest: recentTransactionsRequest).execute(apiResponseQueue) { result in
				switch result {
				case let .success(response):
					completion(response.body, nil)
				case let .failure(error):
					completion(nil, error)
				}
			}
		}

		/**
		 Get Recent Transactions
		 - POST /transaction/recent
		 - Returns user-initiated transactions which have been succesfully committed to the ledger. The transactions are returned in a paginated format, ordered by most recent.
		 - parameter recentTransactionsRequest: (body)
		 - returns: RequestBuilder<RecentTransactionsResponse>
		 */
		open class func recentTransactionsWithRequestBuilder(recentTransactionsRequest: RecentTransactionsRequest) -> RequestBuilder<RecentTransactionsResponse> {
			let localVariablePath = "/transaction/recent"
			let localVariableURLString = GatewayAPI.basePath + localVariablePath
			let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: recentTransactionsRequest)

			let localVariableUrlComponents = URLComponents(string: localVariableURLString)

			let localVariableNillableHeaders: [String: Any?] = [:]

			let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

			let localVariableRequestBuilder: RequestBuilder<RecentTransactionsResponse>.Type = GatewayAPI.requestBuilderFactory.getBuilder()

			return localVariableRequestBuilder.init(method: "POST", URLString: localVariableUrlComponents?.string ?? localVariableURLString, parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
		}

		/**
		 Submit Transaction

		 - parameter transactionSubmitRequest: (body)
		 - parameter apiResponseQueue: The queue on which api response is dispatched.
		 - parameter completion: completion handler to receive the data and the error objects
		 */
		@discardableResult
		open class func submitTransaction(transactionSubmitRequest: TransactionSubmitRequest, apiResponseQueue: DispatchQueue = GatewayAPI.apiResponseQueue, completion: @escaping ((_ data: TransactionSubmitResponse?, _ error: Error?) -> Void)) -> RequestTask {
			submitTransactionWithRequestBuilder(transactionSubmitRequest: transactionSubmitRequest).execute(apiResponseQueue) { result in
				switch result {
				case let .success(response):
					completion(response.body, nil)
				case let .failure(error):
					completion(nil, error)
				}
			}
		}

		/**
		 Submit Transaction
		 - POST /transaction/submit
		 - Submits a signed transaction payload to the network. The transaction identifier from finalize or submit can then be used to track the transaction status.
		 - parameter transactionSubmitRequest: (body)
		 - returns: RequestBuilder<TransactionSubmitResponse>
		 */
		open class func submitTransactionWithRequestBuilder(transactionSubmitRequest: TransactionSubmitRequest) -> RequestBuilder<TransactionSubmitResponse> {
			let localVariablePath = "/transaction/submit"
			let localVariableURLString = GatewayAPI.basePath + localVariablePath
			let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: transactionSubmitRequest)

			let localVariableUrlComponents = URLComponents(string: localVariableURLString)

			let localVariableNillableHeaders: [String: Any?] = [:]

			let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

			let localVariableRequestBuilder: RequestBuilder<TransactionSubmitResponse>.Type = GatewayAPI.requestBuilderFactory.getBuilder()

			return localVariableRequestBuilder.init(method: "POST", URLString: localVariableUrlComponents?.string ?? localVariableURLString, parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
		}

		/**
		 Transaction Details

		 - parameter transactionDetailsRequest: (body)
		 - parameter apiResponseQueue: The queue on which api response is dispatched.
		 - parameter completion: completion handler to receive the data and the error objects
		 */
		@discardableResult
		open class func transactionDetails(transactionDetailsRequest: TransactionDetailsRequest, apiResponseQueue: DispatchQueue = GatewayAPI.apiResponseQueue, completion: @escaping ((_ data: TransactionDetailsResponse?, _ error: Error?) -> Void)) -> RequestTask {
			transactionDetailsWithRequestBuilder(transactionDetailsRequest: transactionDetailsRequest).execute(apiResponseQueue) { result in
				switch result {
				case let .success(response):
					completion(response.body, nil)
				case let .failure(error):
					completion(nil, error)
				}
			}
		}

		/**
		 Transaction Details
		 - POST /transaction/details
		 - Returns the status and contents of the transaction with the given transaction identifier. Transaction identifiers which aren't recognised as either belonging to a committed transaction or a transaction submitted through this Network Gateway may return a `TransactionNotFoundError`. Transaction identifiers relating to failed transactions will, after a delay, also be reported as a `TransactionNotFoundError`.
		 - parameter transactionDetailsRequest: (body)
		 - returns: RequestBuilder<TransactionDetailsResponse>
		 */
		open class func transactionDetailsWithRequestBuilder(transactionDetailsRequest: TransactionDetailsRequest) -> RequestBuilder<TransactionDetailsResponse> {
			let localVariablePath = "/transaction/details"
			let localVariableURLString = GatewayAPI.basePath + localVariablePath
			let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: transactionDetailsRequest)

			let localVariableUrlComponents = URLComponents(string: localVariableURLString)

			let localVariableNillableHeaders: [String: Any?] = [:]

			let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

			let localVariableRequestBuilder: RequestBuilder<TransactionDetailsResponse>.Type = GatewayAPI.requestBuilderFactory.getBuilder()

			return localVariableRequestBuilder.init(method: "POST", URLString: localVariableUrlComponents?.string ?? localVariableURLString, parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
		}

		/**
		 Transaction Status

		 - parameter transactionStatusRequest: (body)
		 - parameter apiResponseQueue: The queue on which api response is dispatched.
		 - parameter completion: completion handler to receive the data and the error objects
		 */
		@discardableResult
		open class func transactionStatus(transactionStatusRequest: TransactionStatusRequest, apiResponseQueue: DispatchQueue = GatewayAPI.apiResponseQueue, completion: @escaping ((_ data: TransactionStatusResponse?, _ error: Error?) -> Void)) -> RequestTask {
			transactionStatusWithRequestBuilder(transactionStatusRequest: transactionStatusRequest).execute(apiResponseQueue) { result in
				switch result {
				case let .success(response):
					completion(response.body, nil)
				case let .failure(error):
					completion(nil, error)
				}
			}
		}

		/**
		 Transaction Status
		 - POST /transaction/status
		 - Returns the status and contents of the transaction with the given transaction identifier. Transaction identifiers which aren't recognised as either belonging to a committed transaction or a transaction submitted through this Network Gateway may return a `TransactionNotFoundError`. Transaction identifiers relating to failed transactions will, after a delay, also be reported as a `TransactionNotFoundError`.
		 - parameter transactionStatusRequest: (body)
		 - returns: RequestBuilder<TransactionStatusResponse>
		 */
		open class func transactionStatusWithRequestBuilder(transactionStatusRequest: TransactionStatusRequest) -> RequestBuilder<TransactionStatusResponse> {
			let localVariablePath = "/transaction/status"
			let localVariableURLString = GatewayAPI.basePath + localVariablePath
			let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: transactionStatusRequest)

			let localVariableUrlComponents = URLComponents(string: localVariableURLString)

			let localVariableNillableHeaders: [String: Any?] = [:]

			let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

			let localVariableRequestBuilder: RequestBuilder<TransactionStatusResponse>.Type = GatewayAPI.requestBuilderFactory.getBuilder()

			return localVariableRequestBuilder.init(method: "POST", URLString: localVariableUrlComponents?.string ?? localVariableURLString, parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
		}
	}
}

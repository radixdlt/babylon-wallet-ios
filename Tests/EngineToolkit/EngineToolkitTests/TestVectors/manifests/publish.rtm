# This transaction manifest shows how a package can be published to the ledger

# ==================================================================================================
# WARNING: If you will be submitting this transaction through the Babylon wallet then you MUST
# remove the "lock_fee" instruction that you see below. Otherwise your transaction will fail. If all
# that you are using is resim then you can safely ignore this warning.
# ==================================================================================================

# Locking 10 XRD in fees from the account component.
CALL_METHOD
    Address("${account_address}")
    "lock_fee"
    Decimal("10");

# Publishing a new package and setting some of its royalty and access rules.
PUBLISH_PACKAGE_ADVANCED
    Blob("${code_blob_hash}")
    Blob("${schema_blob_hash}")
    Map<String, Tuple>()       # Royalty Configuration
    Map<String, String>()      # Metadata
    Tuple(                     # Access Rules Config Struct
        Map<Tuple, Enum>(),     # Direct Access Method auth Field
        Map<Tuple, Enum>(       # Method auth Field
            Tuple(
                Enum("TypedModuleId::ObjectState"),
                "set_royalty_config"
            ),
            Enum(
                "AccessRuleEntry::AccessRule",
                Enum(
                    "AccessRule::Protected",
                    Enum(
                        "AccessRuleNode::ProofRule",
                        Enum(
                            "ProofRule::Require",
                            Enum(
                                "SoftResourceOrNonFungible::StaticNonFungible",
                                NonFungibleGlobalId("${auth_badge_resource_address}:${auth_badge_non_fungible_local_id}")
                            )
                        )
                    )
                )
            ),
            Tuple(
                Enum("TypedModuleId::ObjectState"),
                "claim_royalty"
            ),
            Enum(
                "AccessRuleEntry::AccessRule",
                Enum(
                    "AccessRule::Protected",
                    Enum(
                        "AccessRuleNode::ProofRule",
                        Enum(
                            "ProofRule::Require",
                            Enum(
                                "SoftResourceOrNonFungible::StaticNonFungible",
                                NonFungibleGlobalId("${auth_badge_resource_address}:${auth_badge_non_fungible_local_id}")
                            )
                        )
                    )
                )
            ),
            Tuple(
                Enum("TypedModuleId::Metadata"),
                "set"
            ),
            Enum(
                "AccessRuleEntry::AccessRule",
                Enum(
                    "AccessRule::Protected",
                    Enum(
                        "AccessRuleNode::ProofRule",
                        Enum(
                            "ProofRule::Require",
                            Enum(
                                "SoftResourceOrNonFungible::StaticNonFungible",
                                NonFungibleGlobalId("${auth_badge_resource_address}:${auth_badge_non_fungible_local_id}")
                            )
                        )
                    )
                )
            ),
            Tuple(
                Enum("TypedModuleId::Metadata"),
                "get"
            ),
            Enum(
                "AccessRuleEntry::AccessRule",
                Enum("AccessRule::AllowAll")
            )
        ),
        Map<String, Enum>(),     # Grouped Auth Field
        Enum(
            "AccessRuleEntry::AccessRule",
            Enum("AccessRule::DenyAll")         # Default Auth Field
        ),
        Map<Tuple, Enum>(         # Method Auth Mutability Field
            Tuple(
                Enum("TypedModuleId::ObjectState"),
                "set_royalty_config"
            ),
            Enum(
                "AccessRuleEntry::AccessRule",
                Enum(
                    "AccessRule::Protected",
                    Enum(
                        "AccessRuleNode::ProofRule",
                        Enum(
                            "ProofRule::Require",
                            Enum(
                                "SoftResourceOrNonFungible::StaticNonFungible",
                                NonFungibleGlobalId("${auth_badge_resource_address}:${auth_badge_non_fungible_local_id}")
                            )
                        )
                    )
                )
            ),
            Tuple(
                Enum("TypedModuleId::ObjectState"),
                "claim_royalty"
            ),
            Enum(
                "AccessRuleEntry::AccessRule",
                Enum(
                    "AccessRule::Protected",
                    Enum(
                        "AccessRuleNode::ProofRule",
                        Enum(
                            "ProofRule::Require",
                            Enum(
                                "SoftResourceOrNonFungible::StaticNonFungible",
                                NonFungibleGlobalId("${auth_badge_resource_address}:${auth_badge_non_fungible_local_id}")
                            )
                        )
                    )
                )
            ),
            Tuple(
                Enum("TypedModuleId::Metadata"),
                "set"
            ),
            Enum(
                "AccessRuleEntry::AccessRule",
                Enum(
                    "AccessRule::Protected",
                    Enum(
                        "AccessRuleNode::ProofRule",
                        Enum(
                            "ProofRule::Require",
                            Enum(
                                "SoftResourceOrNonFungible::StaticNonFungible",
                                NonFungibleGlobalId("${auth_badge_resource_address}:${auth_badge_non_fungible_local_id}")
                            )
                        )
                    )
                )
            ),
            Tuple(
                Enum("TypedModuleId::Metadata"),
                "get"
            ),
            Enum(
                "AccessRuleEntry::AccessRule",
                Enum(
                    "AccessRule::Protected",
                    Enum(
                        "AccessRuleNode::ProofRule",
                        Enum(
                            "ProofRule::Require",
                            Enum(
                                "SoftResourceOrNonFungible::StaticNonFungible",
                                NonFungibleGlobalId("${auth_badge_resource_address}:${auth_badge_non_fungible_local_id}")
                            )
                        )
                    )
                )
            )
        ),
        Map<String, Enum>(),     # Group Auth Mutability Field
        Enum(
            "AccessRuleEntry::AccessRule",
            Enum("AccessRule::DenyAll")          # Default Auth Mutability Field
        )
    );

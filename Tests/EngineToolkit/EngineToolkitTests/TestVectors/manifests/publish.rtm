# This transaction manifest shows how a package can be published to the ledger

# ==================================================================================================
# WARNING: If you will be submitting this transaction through the Babylon wallet then you MUST
# remove the "lock_fee" instruction that you see below. Otherwise your transaction will fail. If all 
# that you are using is resim then you can safely ignore this warning.
# ==================================================================================================

# Locking 10 XRD in fees from the account component. 
CALL_METHOD 
    ComponentAddress("{account_component_address}") 
    "lock_fee"
    Decimal("10");

# Publishing a new package and setting some of its royalty and access rules.
PUBLISH_PACKAGE 
    Blob("{code_blob_hash}") 
    Blob("{abi_blob_hash}") 
    Map<String, Tuple>()       # Royalty Configuration
    Map<String, String>()      # Metadata 
    Tuple(                     # Access Rules Struct
        Map<Enum, Enum>(       # Method auth Field
            Enum(
                "AccessRuleKey::Native", 
                Enum(
                    "NativeFn::Package",
                    Enum("PackageFn::SetRoyaltyConfig")
                )
            ), 
            Enum(
                "AccessRuleEntry::AccessRule", 
                Enum(
                    "AccessRule::Protected", 
                    Enum(
                        "AccessRuleNode::ProofRule", 
                        Enum(
                            "ProofRule::Require", 
                            Enum(
                                "SoftResourceOrNonFungible::StaticNonFungible", 
                                NonFungibleGlobalId("{auth_badge_resource_address}:{auth_badge_non_fungible_local_id}")
                            )
                        )
                    )
                )
            ),
            Enum(
                "AccessRuleKey::Native", 
                Enum(
                    "NativeFn::Package",
                    Enum("PackageFn::ClaimRoyalty")
                )
            ),
            Enum(
                "AccessRuleEntry::AccessRule", 
                Enum(
                    "AccessRule::Protected", 
                    Enum(
                        "AccessRuleNode::ProofRule", 
                        Enum(
                            "ProofRule::Require", 
                            Enum(
                                "SoftResourceOrNonFungible::StaticNonFungible", 
                                NonFungibleGlobalId("{auth_badge_resource_address}:{auth_badge_non_fungible_local_id}")
                            )
                        )
                    )
                )
            ),
            Enum(
                "AccessRuleKey::Native", 
                Enum(
                    "NativeFn::Metadata",
                    Enum("MetadataFn::Set")
                )
            ),
            Enum(
                "AccessRuleEntry::AccessRule", 
                Enum(
                    "AccessRule::Protected", 
                    Enum(
                        "AccessRuleNode::ProofRule", 
                        Enum(
                            "ProofRule::Require", 
                            Enum(
                                "SoftResourceOrNonFungible::StaticNonFungible", 
                                NonFungibleGlobalId("{auth_badge_resource_address}:{auth_badge_non_fungible_local_id}")
                            )
                        )
                    )
                )
            ),
            Enum(
                "AccessRuleKey::Native", 
                Enum(
                    "NativeFn::Metadata",
                    Enum("MetadataFn::Get")
                )
            ),
            Enum(
                "AccessRuleEntry::AccessRule", 
                Enum("AccessRule::AllowAll")
            )
        ), 
        Map<String, Enum>(),     # Grouped Auth Field
        Enum("AccessRule::DenyAll"),         # Default Auth Field
        Map<Enum, Enum>(         # Method Auth Mutability Field
            Enum(
                "AccessRuleKey::Native", 
                Enum(
                    "NativeFn::Package",
                    Enum("PackageFn::SetRoyaltyConfig")
                )
            ), 
            Enum(
                "AccessRule::Protected", 
                Enum(
                    "AccessRuleNode::ProofRule", 
                    Enum(
                        "ProofRule::Require", 
                        Enum(
                            "SoftResourceOrNonFungible::StaticNonFungible", 
                            NonFungibleGlobalId("{auth_badge_resource_address}:{auth_badge_non_fungible_local_id}")
                        )
                    )
                )
            ),
            Enum(
                "AccessRuleKey::Native", 
                Enum(
                    "NativeFn::Package",
                    Enum("PackageFn::ClaimRoyalty")
                )
            ), 
            Enum(
                "AccessRule::Protected", 
                Enum(
                    "AccessRuleNode::ProofRule", 
                    Enum(
                        "ProofRule::Require", 
                        Enum(
                            "SoftResourceOrNonFungible::StaticNonFungible", 
                            NonFungibleGlobalId("{auth_badge_resource_address}:{auth_badge_non_fungible_local_id}")
                        )
                    )
                )
            ),
            Enum(
                "AccessRuleKey::Native", 
                Enum(
                    "NativeFn::Metadata",
                    Enum("MetadataFn::Set")
                )
            ), 
            Enum(
                "AccessRule::Protected", 
                Enum(
                    "AccessRuleNode::ProofRule", 
                    Enum(
                        "ProofRule::Require", 
                        Enum(
                            "SoftResourceOrNonFungible::StaticNonFungible", 
                            NonFungibleGlobalId("{auth_badge_resource_address}:{auth_badge_non_fungible_local_id}")
                        )
                    )
                )
            ),
            Enum(
                "AccessRuleKey::Native", 
                Enum(
                    "NativeFn::Metadata",
                    Enum("MetadataFn::Get")
                )
            ), 
            Enum(
                "AccessRule::Protected", 
                Enum(
                    "AccessRuleNode::ProofRule", 
                    Enum(
                        "ProofRule::Require", 
                        Enum(
                            "SoftResourceOrNonFungible::StaticNonFungible", 
                            NonFungibleGlobalId("{auth_badge_resource_address}:{auth_badge_non_fungible_local_id}")
                        )
                    )
                )
            )
        ), 
        Map<String, Enum>(),     # Group Auth Mutability Field
        Enum("AccessRule::DenyAll")          # Default Auth Mutability Field
    );
